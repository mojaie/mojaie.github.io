<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[mojaie.github.io]]></title><description><![CDATA[ケモインフォ関連]]></description><link>https://mojaie.github.io</link><generator>GatsbyJS</generator><lastBuildDate>Thu, 30 Apr 2020 12:06:53 GMT</lastBuildDate><item><title><![CDATA[Gatsbyでブログを構築した際の備忘録]]></title><description><![CDATA[Gatsbyでこのサイト(mojaie.github.io)を構築した際の備忘録です。 Gatsby http://gatsbyjs.org/ 導入経緯 ブログ用の静的サイトジェネレータとしてJekyllを以前使用していましたが、機能拡張のために新しくRuby…]]></description><link>https://mojaie.github.io/gatsby-blog-memo/</link><guid isPermaLink="false">https://mojaie.github.io/gatsby-blog-memo/</guid><pubDate>Thu, 30 Apr 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Gatsbyでこのサイト(mojaie.github.io)を構築した際の備忘録です。&lt;/p&gt;
&lt;p&gt;Gatsby&lt;br&gt;
&lt;a href=&quot;http://gatsbyjs.org/&quot;&gt;http://gatsbyjs.org/&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;導入経緯&lt;/h3&gt;
&lt;p&gt;ブログ用の静的サイトジェネレータとしてJekyllを以前使用していましたが、機能拡張のために新しくRubyを習得するのが面倒で、最近は他にもっとビルドが速いジェネレータがあるらしいということで乗り換えを検討することにしました。&lt;/p&gt;
&lt;p&gt;HUGO、MetalSmith、Gatsbyを試してみましたが、GatsbyはReactとGraphQLベースで内部の仕組みが直感的に理解しやすく、ドキュメントもかなり充実しているので、当面Gatsbyで進めていきたいと思います。&lt;/p&gt;
&lt;h3&gt;前提&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Node.js&lt;/p&gt;
&lt;p&gt;GatsbyのプロジェクトはNode.jsのパッケージとして作成します。Node.jsがない場合はHomeBrewあるいはAnaconda等でインストールしておきます。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;導入の流れ&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Node.js, gatsby-cliをインストールする&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;gatsbyコマンドをコマンドラインから使用するために、npmもしくはyarnでNode.jsのグローバルにgatsby-cliをインストールします。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;yarn install -g gatsby-cli&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;主要なgatsbyのコマンド(developやserveなど)は後述のスターターから作成したプロジェクトのpackage.jsonのscriptに記載されていて、ローカルでは&lt;code class=&quot;language-text&quot;&gt;npm run&lt;/code&gt;や&lt;code class=&quot;language-text&quot;&gt;yarn&lt;/code&gt;で呼び出すことができます。実質、グローバルからgatsbyコマンドを実行するのは、newコマンドでプロジェクトを作成する時のみです。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;好きなスターター(starter)を選ぶ&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;スターター(starter)と呼ばれるGatsbyプロジェクトのテンプレートがGitリポジトリとして公開されているので、&lt;code class=&quot;language-text&quot;&gt;gatsby new&lt;/code&gt;でcloneしてプロジェクトを作成します。当サイトはgatsby-starter-blogというスターターを元に作成しています。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;gatsby new gatsby-starter-blog https://github.com/gatsbyjs/gatsby-starter-blog&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;他のサイトジェネレータのようにテーマを選んで着せ替えるというよりは、最初にcloneした叩き台を元に自分で必要な機能を肉付けしていくというイメージです。gatsby本体やデフォルトのプラグインはnewコマンドでプロジェクトを作成した際に依存パッケージとしてインストールされます。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;機能追加、カスタマイズ&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;srcフォルダのスクリプトやスタイルシートを編集してデザインの変更や機能追加を行います。タグやカテゴリのような機能はプラグインとして公開されているものもありますが、公式ドキュメントのチュートリアルにしたがって簡単に実装可能です。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;記事を書く&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Markdownで記事を書きます。frontmatterが利用可能で、フォーマットはJekyllやHugoなどと同様です。gatsby-starter-blogの場合、package.jsonに記載されたプラグインgatsby-transformer-remarkにより、remark.jsというパッケージを使用してMarkdownをパースします。他のプラグインを導入することでMarkdown以外のファイル形式も取り扱うことができます。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;デプロイ(GitHub Pages)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;公式チュートリアルにはNetlifyやGitHub Pages等へのデプロイの例が記載されています。当サイトはGitHub Pagesでホスティングしています。GitHub Pageへのデプロイにはgh-pagesパッケージを使用します。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;yarn install gh-pages&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;デプロイするリポジトリのmasterブランチを作成し、package.jsonのscriptに&lt;code class=&quot;language-text&quot;&gt;&amp;quot;deploy&amp;quot;: &amp;quot;gatsby build &amp;amp;&amp;amp; gh-pages -d public -b master&amp;quot;&lt;/code&gt;を記載しておきます。これで、&lt;code class=&quot;language-text&quot;&gt;yarn deploy&lt;/code&gt;によりプロジェクトのビルドとmasterへのpushが実行されます。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;スターター、プラグイン、テーマ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;スターター(starter)はプロジェクトの骨子となるgitリポジトリ。ブログ、技術文書、物販サイトなどのテンプレートから用途に一番近いものを選んで&lt;code class=&quot;language-text&quot;&gt;gatsby new&lt;/code&gt;する。&lt;/li&gt;
&lt;li&gt;プラグイン(plugin)は拡張機能で、npmのモジュールとして提供される。Markdownパーサ、画像最適化、ルーティング、SEO、各種ブログパーツなど。&lt;/li&gt;
&lt;li&gt;テーマ(theme)はプラグインの一種。srcフォルダに複数のテーマを設置して使い分けることで用途別に複数のサイトを運用可能。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Gatsbyプロジェクトの構造&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;プロジェクトのルートディレクトリにあるもの&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;gatsby-config.js:&lt;/strong&gt; サイトのメタデータ、各種プラグイン設定など。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;gatsby-browser.js:&lt;/strong&gt; グローバルCSSやフォントの呼び出し、ルーティングの設定など。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;gatsby-node.js:&lt;/strong&gt; contentフォルダのファイルをパースしてページを生成しサイトを構築するスクリプト。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;contentフォルダ:&lt;/strong&gt; Markdownファイルや画像など、サイトのコンテンツを格納&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;srcフォルダ:&lt;/strong&gt; Reactコンポーネントや各ページのCSSを格納&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;staticフォルダ:&lt;/strong&gt; サイトの自動生成に関与しないファイル。favicon.icoやrobot.txtなど生成したサイトでそのまま使うファイル。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;node_modules:&lt;/strong&gt; Gatsbyのプラグインなど、Node.jsのモジュールが格納されている。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;public:&lt;/strong&gt; Gatsbyで自動生成したサイト。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;ビルドプロセスの中身&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;gatsby build&lt;/code&gt;した際の挙動。&lt;/p&gt;
&lt;p&gt;Gatsby Lifecycle APIs&lt;br&gt;
&lt;a href=&quot;https://www.gatsbyjs.org/docs/gatsby-lifecycle-apis/&quot;&gt;https://www.gatsbyjs.org/docs/gatsby-lifecycle-apis/&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;主なgatsbyコマンド&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;gatsby build&lt;/code&gt;: ビルドのみ実施。publicフォルダにファイルが生成される。&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;gatsby clean&lt;/code&gt;: ビルドしたデータを削除する。&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;gatsby develop&lt;/code&gt;: 開発用サーバを起動する(process.env.NODE_ENV = development)。ビルドはしない。稼働中はファイルを変更するたびにホットリロードされてサイトに変更が即時反映される。&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;gatsby serve&lt;/code&gt;: ビルドしたサイトのサーバを起動する(process.env.NODE_ENV = production)。デプロイ前の確認用。&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Juliaでパッケージを作成して公開する]]></title><description><![CDATA[Juliaでパッケージを作成する方法です。 (Juliaのパッケージシステムはまだ開発途上なので、頻繁に変更があります。) プロジェクトの作成 メタファイルの作成 最低限必要と思われるメタファイルは以下です。 Project.toml…]]></description><link>https://mojaie.github.io/julia-package-publish/</link><guid isPermaLink="false">https://mojaie.github.io/julia-package-publish/</guid><pubDate>Wed, 29 Apr 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Juliaでパッケージを作成する方法です。&lt;/p&gt;
&lt;p&gt;(Juliaのパッケージシステムはまだ開発途上なので、頻繁に変更があります。)&lt;/p&gt;
&lt;h3&gt;プロジェクトの作成&lt;/h3&gt;
&lt;h3&gt;メタファイルの作成&lt;/h3&gt;
&lt;p&gt;最低限必要と思われるメタファイルは以下です。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Project.toml&lt;/p&gt;
&lt;p&gt;プロジェクトの設定が書かれたファイルです。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Manifest.toml&lt;/p&gt;
&lt;p&gt;REPLでプロジェクトにパッケージをインストールすると自動的に生成されます。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;.travis.yml&lt;/p&gt;
&lt;p&gt;パッケージ登録、バージョンアップの際にTravisCIがPassしていることが自動マージの条件の一つになっています。CIのチェックが通らない場合、毎回レジストリ管理者のレビューが必要になります。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;JuliaRegistratorのインストール&lt;/h3&gt;
&lt;p&gt;JuliaRegistratorはGitHub appsで、下記ページからインストールできます。パッケージの更新(新規作成またはバージョンアップ)をレジストリに知らせるツールです。&lt;/p&gt;
&lt;h3&gt;TagBotのインストール&lt;/h3&gt;
&lt;p&gt;以前はTagBotもGitHub appsでしたが、2020年2月頃からはGitHub Actionになっています。
.github/workflows以下に設定ファイルを置くことで、定期的にレジストリの更新をチェックし、&lt;/p&gt;
&lt;h3&gt;新規パッケージの登録&lt;/h3&gt;
&lt;p&gt;コミットのコメント蘭、もしくはissueに&lt;code class=&quot;language-text&quot;&gt;@JuliaRegistrator register&lt;/code&gt;と入力して投稿すると、自動的にレジストリにPull requestが送信されます。新しいパッケージを登録するリクエストを送ると、一定期間は登録が保留され、レジストリ管理者らによるレビューが行われます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;類似したパッケージが既にレジストリに登録されていないか&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;命名規則&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;パッケージ名は原則キャメルケース&lt;/li&gt;
&lt;li&gt;名前が長すぎないか&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;パッケージの内容が端的に分かるものか&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;アクロニムは原則不可&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;一般的すぎる名称ではないか&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;バージョンアップ&lt;/h3&gt;
&lt;p&gt;Project.tomlのバージョンを変更する&lt;/p&gt;
&lt;p&gt;コミットしてgithubにpush
(注意:この時点でタグは付けない、register時に重複existing tagでエラーになる)&lt;/p&gt;
&lt;p&gt;GitHubからコミットにアクセスしてコメント欄に
&lt;code class=&quot;language-text&quot;&gt;@JuliaRegistrator register&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;自動的にJuliaRegistoryへのPull requestが生成される&lt;/p&gt;
&lt;p&gt;Pull requestが通ったらTagBotが自動的にタグとリリースとリリースノートを作成&lt;/p&gt;</content:encoded></item><item><title><![CDATA[表面プラズモン共鳴(SPR)の学習リソースまとめ]]></title><description><![CDATA[表面プラズモン共鳴(SPR)に関する学習リソースのまとめです。随時更新。 Webページ SPR pages https://www.sprpages.nl/ Dr.津本 相互作用解析の王道（GE Healthcare）https://www.gelifesciences.co…]]></description><link>https://mojaie.github.io/spr-bookmarks/</link><guid isPermaLink="false">https://mojaie.github.io/spr-bookmarks/</guid><pubDate>Tue, 28 Apr 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;表面プラズモン共鳴(SPR)に関する学習リソースのまとめです。随時更新。&lt;/p&gt;
&lt;h3&gt;Webページ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;SPR pages &lt;a href=&quot;https://www.sprpages.nl/&quot;&gt;https://www.sprpages.nl/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Dr.津本 相互作用解析の王道（GE Healthcare）&lt;a href=&quot;https://www.gelifesciences.co.jp/technologies/biacore/road/index.html&quot;&gt;https://www.gelifesciences.co.jp/technologies/biacore/road/index.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;文献&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Determination of the refractive index increments of small molecules for correction of surface plasmon resonance data. &lt;a href=&quot;https://dx.doi.org/10.1006/abio.2000.4726&quot;&gt;https://dx.doi.org/10.1006/abio.2000.4726&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Surface plasmon resonance based assay for the detection and characterization of promiscuous inhibitors. &lt;a href=&quot;https://dx.doi.org/10.1021/jm700952v&quot;&gt;https://dx.doi.org/10.1021/jm700952v&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;書籍&lt;/h3&gt;</content:encoded></item><item><title><![CDATA[このブログについて]]></title><description><![CDATA[創薬、インフォマティクス関連の技術記事やDIY、料理の備忘録としていきたいと思います。
よろしくお願いいたします。]]></description><link>https://mojaie.github.io/new-blog/</link><guid isPermaLink="false">https://mojaie.github.io/new-blog/</guid><pubDate>Sun, 26 Apr 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;創薬、インフォマティクス関連の技術記事やDIY、料理の備忘録としていきたいと思います。
よろしくお願いいたします。&lt;/p&gt;</content:encoded></item></channel></rss>