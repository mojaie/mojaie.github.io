{"componentChunkName":"component---src-templates-post-js","path":"/julia-package-binary/","result":{"data":{"site":{"siteMetadata":{"title":"mojaie.github.io","siteUrl":"https://mojaie.github.io","author":{"name":"Seiji Matsuoka","summary":"Cheminformatics, Biointeraction and Laboratory automation"},"license":"CC BY 4.0","licenseURL":"https://creativecommons.org/licenses/by/4.0/legalcode","social":{"twitter":"mojaie"}}},"markdownRemark":{"id":"9c3a5061-3168-574b-a500-82009decd701","excerpt":"C/C++のライブラリを公開リポジトリに登録してJuliaのパッケージとして使用する方法です。BinaryBuilder.jlで設定ファイルを作成し、Yggdrasilを通じてJuliaBinaryWrappersにパッケージ登録します(Julia 1.3以降)。 おおまかな流れ C/C…","html":"<p>C/C++のライブラリを公開リポジトリに登録してJuliaのパッケージとして使用する方法です。BinaryBuilder.jlで設定ファイルを作成し、Yggdrasilを通じてJuliaBinaryWrappersにパッケージ登録します(Julia 1.3以降)。</p>\n<h3>おおまかな流れ</h3>\n<ol>\n<li>C/C++ライブラリの準備</li>\n<li>(Dockerがない場合)Dockerをインストール</li>\n<li>BinaryBuilder.jlのインストール</li>\n<li>build_tarballs.jlの作成</li>\n<li>jllパッケージの動作確認</li>\n<li>Yggdrasilにプルリクエストを送る</li>\n</ol>\n<p>Juliaのバイナリパッケージの管理はYggdrasilとJuliaBinaryWrappersが担っています。</p>\n<ul>\n<li>Yggdrasil <a href=\"https://github.com/JuliaPackaging/Yggdrasil\">https://github.com/JuliaPackaging/Yggdrasil</a></li>\n<li>JuliaBinaryWrappers <a href=\"https://github.com/JuliaBinaryWrappers\">https://github.com/JuliaBinaryWrappers</a></li>\n</ul>\n<p>Yggdrasilはビルド設定ファイル(build_tarballs.jl)を管理しています。build_tarballs.jlにはバイナリパッケージのビルドに必要な資源やビルド方法の情報が記載されています。Yggdrasilにこの設定ファイルのプルリクエストを送りマージされると、自動的にWindows、Mac OSX, Linuxなど各プラットフォームに対応したビルドレシピが生成され、JuliaBinaryWrappersのリポジトリにjllパッケージとして登録されます。jllパッケージは各環境に合わせてJuliaのパッケージとしてビルドされ、Juliaのデフォルトのパッケージ管理システム(Pkg.jl)で管理することができます。</p>\n<h3>C/C++ライブラリの準備</h3>\n<p>Juliaパッケージにするライブラリのソースコードを入手し、ビルドできることを確認しておきます。</p>\n<p>Cライブラリの場合は、Juliaから<code class=\"language-text\">ccall</code>関数で直接Cの関数を呼び出すことができます。C++は直接サポートされていないので、<a href=\"https://github.com/JuliaInterop/Cxx.jl\">Cxx.jl</a>もしくは<a href=\"https://github.com/JuliaInterop/CxxWrap.jl\">CxxWrap.jl</a>などのパッケージを利用するか、<code class=\"language-text\">extern &quot;C&quot;</code>でラッパーを作成して関数を<code class=\"language-text\">ccall</code>で呼び出せるようにしておきます。</p>\n<p>Cxx.jlはマクロで直接JuliaのスクリプトにC++のコードが書けるので大変使いやすいですが、LLVM周りのアップデートが進まず、現状ではJulia本体のアップデートに追いついていません。</p>\n<h3>Dockerのインストール</h3>\n<p>BinaryBuilder.jlはDocker上でクロスコンパイラの環境を構築し、各プラットフォームでのソースビルドをシミュレートします。</p>\n<p>Mac OS Xの場合は<a href=\"https://www.docker.com/\">https://www.docker.com/</a>から最新版のDocker Desktopを入手します。Docker Desktopの.dmgファイルをダウンロードしてインストールし、起動しておきます(メニューバーにDockerのアイコンが表示され、クリックすると”Docker desktop is running”と表示されることを確認します)。</p>\n<h3>BinaryBuilder.jlのインストール</h3>\n<p>JuliaのREPLを起動し、Pkgでインストールします。デフォルト環境で構いません。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(v1.3) pkg&gt; add BinaryBuilder</code></pre></div>\n<p>BinaryBuilderをインポートして<code class=\"language-text\">run_wizard</code>を実行すると、ビルドレシピを作成するウィザードが立ち上がります。</p>\n<div class=\"gatsby-highlight\" data-language=\"julia\"><pre class=\"language-julia\"><code class=\"language-julia\"><span class=\"token keyword\">using</span> BinaryBuilder\nBinaryBuilder<span class=\"token punctuation\">.</span>run_wizard<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">o      `.\no*o      \\&#39;-_               00000000: 01111111  .\n \\\\      \\;&quot;&quot;.     ,;.--*  00000001: 01000101  E\n  \\\\     ,\\&#39;&#39;--.--&#39;/       00000003: 01001100  L\n  :=\\--&lt;&#39; `&quot;&quot;  _   |       00000003: 01000110  F\n  ||\\\\     `&quot; / &#39;&#39;--       00000004: 00000010  .\n  `/_\\\\,-|    |            00000005: 00000001  .\n      \\\\/     L\n       \\\\ ,&#39;   \\\n     _/ L&#39;   `  \\          Join us in the #binarybuilder channel on the\n    /  /    /   /          community slack: https://julialang.slack.com\n   /  /    |    \\\n  &quot;_&#39;&#39;--_-&#39;&#39;---__=;        https://github.com/JuliaPackaging/BinaryBuilder.jl\n\nWelcome to the BinaryBuilder wizard.  We&#39;ll get you set up in no time.</code></pre></div>\n<h3>build_tarballs.jlの作成</h3>\n<p>BinaryBuilderのウィザードにしたがって、レシピファイル(build_tarballs.jl)を作成します。</p>\n<p>まずビルドを行うプラットフォームを選択します。パッケージを公開する場合は全てのプラットフォームで利用できることが好ましいので、All Supported Platformsを選択します。ただし、全てのプラットフォームの環境をダウンロードするのにはかなりの時間を要します。時間が無い場合は、とりあえずSelect by Operating Systemを選択して自分の使用しているOSの環境を選択します。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  # Step 1: Select your platforms\n\nMake a platform selection\n&gt; All Supported Platforms\nSelect by Operating System\nFully Custom Platform Choice</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Select operating systems\n[press: d=done, a=all, n=none]\n &gt; [ ] FreeBSD\n   [ ] Linux\n   [ ] MacOS\n   [ ] Windows</code></pre></div>\n<p>次に、ソースコードのgitリポジトリのURLを入力します。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># Step 2a: Obtain the source code\n\nPlease enter a URL (git repository or compressed archive) containing the source code to build:\n&gt; https://github.com/user/mylibrary.git</code></pre></div>\n<p>ビルドするコードのブランチ、コミットもしくはタグを入力します。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">You have selected a git repository. Please enter a branch, commit or tag to use.\nPlease note that for reproducability, the exact commit will be recorded, \nso updates to the remote resource will not be used automatically; \nyou will have to manually update the recorded commit.\n&gt; v1.0.0</code></pre></div>\n<p>追加で必要なリソースがあるかどうか聞いてきます。なければNで次に進みます。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Would you like to download additional sources?  [y/N]: </code></pre></div>\n<p>他に依存するバイナリがあるかどうか聞いてきます。なければNで次に進みます。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># Step 2b: Obtain binary dependencies (if any)\n\nDo you require any (binary) dependencies?  [y/N]: </code></pre></div>\n<p>プロジェクト名を入力します。パッケージ名は[名前]_jll.jlになります。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Enter a name for this project.  This will be used for filenames:\n&gt; mylibrary</code></pre></div>\n<p>ビルドしたコードのバージョンを入力します。セマンティックバージョニング(例: v1.0.0)である必要がありますが、プレリリースやビルドメタデータがあるとエラーになるようです(例: v1.0.0-alpha.1, v1.0.0+2019.03)。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Enter a version number for this project:\n&gt; v1.0.0</code></pre></div>\n<p>コンパイラの設定をカスタマイズするかどうか聞かれます。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Do you want to customize the set of compilers? [y/N]: </code></pre></div>\n<p>Linux環境のサンドボックスでテストビルドを行います。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># Step 3: Build for Linux(:x86_64, libc=:glibc)\n\nYou will now be dropped into the cross-compilation environment.\nPlease compile the package. Your initial compilation target is x86_64-linux-gnu\nThe $prefix environment variable contains the target directory.\nOnce you are done, exit by typing `exit` or `^D`\n\nYou have the following contents in your working directory:\n- mylibrary\nHints:\n- mylibrary/CMakeLists.txt\n\nThis file is likely input to CMake. The recommended options for CMake are\n\ncmake -DCMAKE_INSTALL_PREFIX=$prefix -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TARGET_TOOLCHAIN} -DCMAKE_BUILD_TYPE=Release\n\nfollowed by `make` and `make install`. Since the prefix environment\nvariable is set already, this will automatically perform the installation\ninto the correct directory.\n\n\nmount: mounting overlay on /workspace/srcdir failed: Invalid argument\nsandbox:${WORKSPACE}/srcdir # </code></pre></div>\n<p><code class=\"language-text\">${WORKSPACE}/srcdir</code>というディレクトリの下にソースコードのディレクトリがあるという設定になっています。ソースコードのルートディレクトリにMakefile等がある場合は、例えば下記のようなコマンドになります。ウィザードの説明文にあるように、<code class=\"language-text\">-DCMAKE_INSTALL_PREFIX</code>、<code class=\"language-text\">-DCMAKE_TOOLCHAIN_FILE</code>、<code class=\"language-text\">-DCMAKE_BUILD_TYPE</code>の3つのオプションを付与します。それ以外にライブラリ特有のオプションがあれば付与します。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">cd mylibrary\ncmake -DCMAKE_INSTALL_PREFIX=$prefix -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TARGET_TOOLCHAIN} -DCMAKE_BUILD_TYPE=Release\nmake -j${nproc}\nmake install</code></pre></div>\n<p>無事ビルドが成功したら、exitコマンドでログアウトします。</p>\n<p>サンドボックスで打ったコマンドの履歴が表示されます(最初の行の<code class=\"language-text\">cd $WORKSPACE/srcdir</code>は自動的に追加されます)。コマンドの打ち間違いなどがあった場合は、ここでyを選択してスクリプトを修正します。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">\t\t\tBuild complete\n\nYour build script was:\n\n\tcd $WORKSPACE/srcdir\n\tcd $WORKSPACE/srcdir/mylibrary\n\tcmake -DCMAKE_INSTALL_PREFIX=$prefix -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TARGET_TOOLCHAIN} -DCMAKE_BUILD_TYPE=Release\n\tmake -j${nproc}\n\tmake install\n\texit\n\t\nWould you like to edit this script now? [y/N]: </code></pre></div>\n<p>ビルドしたライブラリの名前を入力します。何もなければ生成されたライブラリファイルの名前と同じでいいと思います。複数のライブラリをビルドした場合はそれぞれに名前を付けます。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># Step 4: Select build products\n\nThe build has produced only one build artifact:\n\nlib/libmylibrary.so.1.4.0\n\nPlease provide a unique variable name for each build artifact:\nlib/libmylibrary.so.1.4.0:\n&gt; libmylibrary</code></pre></div>\n<p>Step1で複数のプラットフォームを指定した場合は、ここで他の仮想環境のインストールとテストビルドが行われます。ダウンロードにかなり時間がかかります。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># Step 5: Generalize the build script\n\nWe will now attempt to use the same script to build for other operating systems.\nThis will help iron out any issues with the cross compiler.\nYour next build target will be x86_64-w64-mingw32\nPress any key to continue...</code></pre></div>\n<p>最後にデプロイの方法を選択します。このままYggdrasilにプルリクエストを送るか、生成したbuild_tarballs.jlのファイルを一旦ローカルに保存する(あるいは標準出力してコピペ)かを選べます。詳しくは後述しますが、build_tarballs.jlの修正やパッケージの動作確認のために、一旦ファイルを出力することをお勧めします。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">\t\t\t# Step 7: Deployment\n\nHow should we deploy this build recipe?\n &gt; Prepare a pull request against the community buildtree, Yggdrasil\n   Write to a local file\n   Print to stdout</code></pre></div>\n<p>Write to a local fileを選択し、ファイル名を入力します。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Enter path to build_tarballs.jl to write to:\n&gt; build_tar.jl</code></pre></div>\n<p>ファイルを書き出し、終了します。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Wizard Complete. Press any key to exit...</code></pre></div>\n<p>なお、build_tarballs.jlは大変シンプルなスクリプトなので、ここまでに長いウィザードで設定してきた項目がbuild_tarballs.jlのどこに記載されているかは簡単に理解できます。細かい変更については、再度ウィザードを起動するよりも、出力したbuild_tarballs.jlを編集した方が速い場合もあると思います。</p>\n<h3>jllパッケージの動作確認</h3>\n<p>いずれかの環境でビルドに問題がある場合は、下記のようにbuild_tarballs.jlをコマンドラインから実行することで、個々のプラットフォームについてビルドを検証することができます。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">julia --color=yes build_tarballs.jl x86_64-apple-darwin14 --debug --verbose</code></pre></div>\n<ul>\n<li>juliaコマンドのオプション<code class=\"language-text\">--color=yes</code>でビルドログがカラー出力されて見やすくなります。</li>\n<li><code class=\"language-text\">build_tarballs.jl</code>の次の引数でプラットフォーム名をコンマ区切りで複数指定できます。省略すると全ての利用可能なプラットフォームでビルドを試みます(ダウンロードに時間がかかります)。</li>\n<li><code class=\"language-text\">--debug</code>、<code class=\"language-text\">--verbose</code>オプションを付けるとビルドの詳細なログが出力されます。</li>\n</ul>\n<p>生成されるjllパッケージの挙動については、ローカルでテストを完結する方法は現状ありません。<code class=\"language-text\">--deploy</code>オプションで自分のGitHubに一旦デプロイしてテストすることが可能です。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">julia --color=yes build_tarballs.jl x86_64-apple-darwin14 --debug --verbose --deploy=&quot;myrepo/mylibrary_jll.jl&quot;</code></pre></div>\n<p>GitHubのログイン情報を聞かれるので、入力するとリポジトリが作成されます。これで、Pkg.addによりjllパッケージをインストールできるようになります。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(v1.3) pkg&gt; add https://github.com/myrepo/mylibrary_jll.jl.git</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">using mylibrary_jll\n\nccall((:myfunction, libmylibrary), Ptr{Cvoid}, ())</code></pre></div>\n<h3>Yggdrasilにプルリクエストを送る</h3>\n<p>Yggdrasilにプルリクエストを送るには以下の2つの方法があります。</p>\n<ol>\n<li>\n<p>BinaryBuilderのウィザードに従って自動でプルリクエストを送る</p>\n<p>ウィザードのStep 7で一番上の選択肢を選ぶことで、プルリクエストの作成に進みます。初めてパッケージを登録する際などは便利ですが、build_tarballs.jlの細かい修正はできません。</p>\n</li>\n<li>\n<p>Yggdrasilをフォークしてbuild_tarballs.jlを設置し、手動でプルリクエストを送る</p>\n<p>バージョンアップ時の軽微な修正や、build_tarballs.jlの詳細な編集が必要な場合は手動でプルリクエストを送ります。ソースコードの内容によっては、各プラットフォームでのビルド時にbuild_tarballs.jlを編集するよう警告が出る場合があるので、その場合は手動での編集が必要になります(例えば、std::stringを使っているコードの互換性を保持するため、platformsに<code class=\"language-text\">expand_cxxstring_abis</code>を適用することを勧められるケースなど)。</p>\n</li>\n</ol>\n<p>どちらの場合も、プルリクエストを送ると自動的にCIのジョブが走り、各プラットフォーム環境でのビルドのテストが実施されます。その後、リポジトリのメンテナーによるレビューが行われ、問題が解決されるとYggdrasilにマージされます。Yggdrasilの次回のcronジョブでJuliaBinaryWrappersにjllパッケージが登録されます。</p>","fields":{"slug":"/julia-package-binary/"},"frontmatter":{"title":"C/C++のライブラリをJuliaのパッケージとして登録する(Julia 1.3以降)","dateCreated":"May 12, 2020","dateModified":"May 25, 2020","tags":["Julia","C","C++","Docker","package manager","package development"],"description":null}},"file":null},"pageContext":{"slug":"/julia-package-binary/","draft":false,"image":null,"previous":{"fields":{"slug":"/molecular-graph-model/"},"frontmatter":{"title":"化学構造とグラフ理論(2): 分子グラフモデル","image":null,"draft":false}},"next":{"fields":{"slug":"/molecular-graph-toc/"},"frontmatter":{"title":"化学構造とグラフ理論","image":null,"draft":false}}}},"staticQueryHashes":["2841359383","3266777773","401191528"]}