{"componentChunkName":"component---src-templates-post-js","path":"/argo-workflow-memo/","result":{"data":{"site":{"siteMetadata":{"title":"mojaie.github.io","siteUrl":"https://mojaie.github.io","author":{"name":"Seiji Matsuoka","summary":"Cheminformatics, Biointeraction and Laboratory automation"},"license":"CC BY 4.0","licenseURL":"https://creativecommons.org/licenses/by/4.0/legalcode","social":{"twitter":"mojaie"}}},"markdownRemark":{"id":"04927e07-3178-5f50-93f3-9d47cdddc327","excerpt":"Dockerのインストール Macの場合Docker desktopをインストールしてデーモンを起動しておきます。 Minikubeのインストール 下記を参考にMinikubeをインストールします。HomeBrewを使うと楽です。 https://minikube.sigs.k8s.io/docs/start…","html":"<h3>Dockerのインストール</h3>\n<p>Macの場合Docker desktopをインストールしてデーモンを起動しておきます。</p>\n<h3>Minikubeのインストール</h3>\n<p>下記を参考にMinikubeをインストールします。HomeBrewを使うと楽です。<br>\n<a href=\"https://minikube.sigs.k8s.io/docs/start/\">https://minikube.sigs.k8s.io/docs/start/</a><br>\n<a href=\"https://kubernetes.io/ja/docs/tasks/tools/install-minikube/\">https://kubernetes.io/ja/docs/tasks/tools/install-minikube/</a></p>\n<div class=\"gatsby-highlight\" data-language=\"shell-session\"><pre class=\"language-shell-session\"><code class=\"language-shell-session\"><span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\">brew update</span></span>\n<span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\">brew <span class=\"token function\">install</span> minikube</span></span></code></pre></div>\n<p>minikube startするとhyperkit(Docker desktopに含まれる)のドライバとkubectlが自動的にインストールされます。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell-session\"><pre class=\"language-shell-session\"><code class=\"language-shell-session\"><span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\">minikube start</span></span>\n<span class=\"token output\">😄  Darwin 10.15.4 上の minikube v1.10.1\n✨  Automatically selected the hyperkit driver\n💾  docker-machine-driver-hyperkit ドライバをダウンロードしています:\n    > docker-machine-driver-hyperkit.sha256: 65 B / 65 B [---] 100.00% ? p/s 0s\n    > docker-machine-driver-hyperkit: 10.90 MiB / 10.90 MiB  100.00% 29.23 KiB \n🔑  The 'hyperkit' driver requires elevated permissions. The following commands will be executed:\n\n</span><span class=\"token info punctuation\">    </span><span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">chown</span> root:wheel /Users/username/.minikube/bin/docker-machine-driver-hyperkit </span></span>\n<span class=\"token info punctuation\">    </span><span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">chmod</span> u+s /Users/username/.minikube/bin/docker-machine-driver-hyperkit </span></span>\n\n<span class=\"token output\">Password:</span></code></pre></div>\n<p>sudoコマンドのパスワードを入力します。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell-session\"><pre class=\"language-shell-session\"><code class=\"language-shell-session\"><span class=\"token output\">💿  VM ブートイメージをダウンロードしています...\n    > minikube-v1.10.0.iso.sha256: 65 B / 65 B [-------------] 100.00% ? p/s 0s\n    > minikube-v1.10.0.iso: 174.99 MiB / 174.99 MiB [] 100.00% 8.27 MiB p/s 21s\n👍  Starting control plane node minikube in cluster minikube\n💾  Kubernetes v1.18.2 のダウンロードの準備をしています\n    > preloaded-images-k8s-v3-v1.18.2-docker-overlay2-amd64.tar.lz4: 525.43 MiB\n🔥  Creating hyperkit VM (CPUs=2, Memory=4000MB, Disk=20000MB) ...\n🐳  Docker 19.03.8 で Kubernetes v1.18.2 を準備しています...\n🔎  Verifying Kubernetes components...\n🌟  Enabled addons: default-storageclass, storage-provisioner\n🏄  Done! kubectl is now configured to use \"minikube\"</span></code></pre></div>\n<p>仮想環境を終了するときはminikube stop</p>\n<div class=\"gatsby-highlight\" data-language=\"shell-session\"><pre class=\"language-shell-session\"><code class=\"language-shell-session\"><span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\">minikube stop</span></span></code></pre></div>\n<p>minikubeのdocker環境を確認します。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell-session\"><pre class=\"language-shell-session\"><code class=\"language-shell-session\"><span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\">minikube -p minikube docker-env</span></span>\n<span class=\"token output\">export DOCKER_TLS_VERIFY=\"1\"\nexport DOCKER_HOST=\"tcp://192.168.64.2:2376\"\nexport DOCKER_CERT_PATH=\"/Users/username/.minikube/certs\"\nexport MINIKUBE_ACTIVE_DOCKERD=\"minikube\"\n\n</span><span class=\"token command\"><span class=\"token shell-symbol important\">#</span> <span class=\"token bash language-bash\">To point your shell to minikube</span></span><span class=\"token output\">'s docker-daemon, run:\n</span><span class=\"token command\"><span class=\"token shell-symbol important\">#</span> <span class=\"token bash language-bash\"><span class=\"token builtin class-name\">eval</span> <span class=\"token variable\"><span class=\"token variable\">$(</span>minikube -p minikube docker-env<span class=\"token variable\">)</span></span></span></span></code></pre></div>\n<p>minikubeのDockerデーモンを再利用してローカルのDockerイメージを使えるようにします。\n一旦設定すればDocker desktop.Appを起動しなくても<code class=\"language-text\">minikube start</code>で自動的にminikubeのDockerデーモンをターミナルから使えるようになります。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell-session\"><pre class=\"language-shell-session\"><code class=\"language-shell-session\"><span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\"><span class=\"token builtin class-name\">eval</span> <span class=\"token variable\"><span class=\"token variable\">$(</span>minikube -p minikube docker-env<span class=\"token variable\">)</span></span></span></span></code></pre></div>\n<p>ダッシュボードを起動</p>\n<div class=\"gatsby-highlight\" data-language=\"shell-session\"><pre class=\"language-shell-session\"><code class=\"language-shell-session\"><span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\">minikube dashboard</span></span></code></pre></div>\n<h3>Argoのインストール</h3>\n<p>getting started<br>\n<a href=\"https://argoproj.github.io/docs/argo/getting-started.html\">https://argoproj.github.io/docs/argo/getting-started.html</a></p>\n<p>これもHomeBrewで入れます。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell-session\"><pre class=\"language-shell-session\"><code class=\"language-shell-session\"><span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\">brew <span class=\"token function\">install</span> argoproj/tap/argo</span></span></code></pre></div>\n<p>Argoの名前空間を作成します。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell-session\"><pre class=\"language-shell-session\"><code class=\"language-shell-session\"><span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\">kubectl create namespace argo</span></span>\n<span class=\"token output\">namespace/argo created</span></code></pre></div>\n<p>Argoをインストールします。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell-session\"><pre class=\"language-shell-session\"><code class=\"language-shell-session\"><span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\">kubectl apply -n argo -f https://raw.githubusercontent.com/argoproj/argo/stable/manifests/install.yaml</span></span>\n<span class=\"token output\">customresourcedefinition.apiextensions.k8s.io/clusterworkflowtemplates.argoproj.io created\ncustomresourcedefinition.apiextensions.k8s.io/cronworkflows.argoproj.io created\ncustomresourcedefinition.apiextensions.k8s.io/workflows.argoproj.io created\ncustomresourcedefinition.apiextensions.k8s.io/workflowtemplates.argoproj.io created\nserviceaccount/argo created\nserviceaccount/argo-server created\nrole.rbac.authorization.k8s.io/argo-role created\nclusterrole.rbac.authorization.k8s.io/argo-aggregate-to-admin created\nclusterrole.rbac.authorization.k8s.io/argo-aggregate-to-edit created\nclusterrole.rbac.authorization.k8s.io/argo-aggregate-to-view created\nclusterrole.rbac.authorization.k8s.io/argo-cluster-role created\nclusterrole.rbac.authorization.k8s.io/argo-server-cluster-role created\nrolebinding.rbac.authorization.k8s.io/argo-binding created\nclusterrolebinding.rbac.authorization.k8s.io/argo-binding created\nclusterrolebinding.rbac.authorization.k8s.io/argo-server-binding created\nconfigmap/workflow-controller-configmap created\nservice/argo-server created\nservice/workflow-controller-metrics created\ndeployment.apps/argo-server created\ndeployment.apps/workflow-controller created</span></code></pre></div>\n<p>defaultネームスペースでadminを設定します。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell-session\"><pre class=\"language-shell-session\"><code class=\"language-shell-session\"><span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\">kubectl create rolebinding default-admin --clusterrole<span class=\"token operator\">=</span>admin --serviceaccount<span class=\"token operator\">=</span>default:default</span></span></code></pre></div>\n<p>ArgoのexampleのページにあるworkflowのYAMLファイル例(hello-world.yaml)をカレントフォルダに置きます。</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> argoproj.io/v1alpha1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Workflow                  <span class=\"token comment\"># new type of k8s spec</span>\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">generateName</span><span class=\"token punctuation\">:</span> hello<span class=\"token punctuation\">-</span>world<span class=\"token punctuation\">-</span>    <span class=\"token comment\"># name of the workflow spec</span>\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">entrypoint</span><span class=\"token punctuation\">:</span> whalesay          <span class=\"token comment\"># invoke the whalesay template</span>\n  <span class=\"token key atrule\">templates</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> whalesay              <span class=\"token comment\"># name of the template</span>\n    <span class=\"token key atrule\">container</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> docker/whalesay\n      <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>cowsay<span class=\"token punctuation\">]</span>\n      <span class=\"token key atrule\">args</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">]</span>\n      <span class=\"token key atrule\">resources</span><span class=\"token punctuation\">:</span>                <span class=\"token comment\"># limit the resources</span>\n        <span class=\"token key atrule\">limits</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">memory</span><span class=\"token punctuation\">:</span> 32Mi\n          <span class=\"token key atrule\">cpu</span><span class=\"token punctuation\">:</span> 100m</code></pre></div>\n<p>ワークフローをサブミット</p>\n<div class=\"gatsby-highlight\" data-language=\"shell-session\"><pre class=\"language-shell-session\"><code class=\"language-shell-session\"><span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\">argo submit hello-world.yaml</span></span></code></pre></div>\n<p>実施中のジョブ一覧を確認</p>\n<div class=\"gatsby-highlight\" data-language=\"shell-session\"><pre class=\"language-shell-session\"><code class=\"language-shell-session\"><span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\">argo list</span></span>\n<span class=\"token output\">NAME                STATUS      AGE   DURATION   PRIORITY\nhello-world-wzvfd   Succeeded   38s   8s         0</span></code></pre></div>\n<p>実施中のジョブの状態を確認</p>\n<div class=\"gatsby-highlight\" data-language=\"shell-session\"><pre class=\"language-shell-session\"><code class=\"language-shell-session\"><span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\">argo get hello-world-wzvfd</span></span>\n<span class=\"token output\">Name:                hello-world-wzvfd\nNamespace:           default\nServiceAccount:      default\nStatus:              Succeeded\nConditions:          \n Completed           True\nCreated:             Sun May 24 23:38:07 +0900 (20 seconds ago)\nStarted:             Sun May 24 23:38:07 +0900 (20 seconds ago)\nFinished:            Sun May 24 23:38:15 +0900 (12 seconds ago)\nDuration:            8 seconds\n\nSTEP                  TEMPLATE  PODNAME            DURATION  MESSAGE\n ✔ hello-world-wzvfd  whalesay  hello-world-wzvfd  6s   </span></code></pre></div>\n<p>結果を確認</p>\n<div class=\"gatsby-highlight\" data-language=\"shell-session\"><pre class=\"language-shell-session\"><code class=\"language-shell-session\"><span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\">argo logs hello-world-wzvfd </span></span>\n<span class=\"token output\">hello-world-wzvfd:  _____________ \nhello-world-wzvfd: &lt; hello world >\nhello-world-wzvfd:  ------------- \nhello-world-wzvfd:     \\\nhello-world-wzvfd:      \\\nhello-world-wzvfd:       \\     \n</span><span class=\"token info punctuation\">hello-world-wzvfd<span class=\"token punctuation\">:</span><span class=\"token path\">                     </span></span><span class=\"token command\"><span class=\"token shell-symbol important\">#</span><span class=\"token bash language-bash\"><span class=\"token comment\">#        .            </span></span></span>\n<span class=\"token info punctuation\">hello-world-wzvfd<span class=\"token punctuation\">:</span><span class=\"token path\">               </span></span><span class=\"token command\"><span class=\"token shell-symbol important\">#</span><span class=\"token bash language-bash\"><span class=\"token comment\"># ## ##       ==            </span></span></span>\n<span class=\"token info punctuation\">hello-world-wzvfd<span class=\"token punctuation\">:</span><span class=\"token path\">            </span></span><span class=\"token command\"><span class=\"token shell-symbol important\">#</span><span class=\"token bash language-bash\"><span class=\"token comment\"># ## ## ##      ===            </span></span></span>\n<span class=\"token output\">hello-world-wzvfd:        /\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"___/ ===        \nhello-world-wzvfd:   ~~~ {~~ ~~~~ ~~~ ~~~~ ~~ ~ /  ===- ~~~   \nhello-world-wzvfd:        \\______ o          __/            \nhello-world-wzvfd:         \\    \\        __/             \nhello-world-wzvfd:           \\____\\______/   </span></code></pre></div>\n<p>ジョブの削除</p>\n<div class=\"gatsby-highlight\" data-language=\"shell-session\"><pre class=\"language-shell-session\"><code class=\"language-shell-session\"><span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\">argo delete hello-world-wzvfd</span></span>\n<span class=\"token output\">Workflow 'hello-world-wzvfd' deleted</span></code></pre></div>\n<p>Webで管理</p>\n<div class=\"gatsby-highlight\" data-language=\"shell-session\"><pre class=\"language-shell-session\"><code class=\"language-shell-session\"><span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\">argo server</span></span></code></pre></div>\n<!--\ndocker run --rm mainwfjl:local julia src/test.jl\ndocker ps\ndocker images\ndocker build -t mainwfjl:local .\nkubectl describe pod hello-world-kgxxb\n\ndocker system prune -all\n-->","fields":{"slug":"/argo-workflow-memo/"},"frontmatter":{"title":"Argoの環境構築","dateCreated":"May 19, 2020","dateModified":"May 26, 2020","tags":["Argo","Docker","Kubernetes","environment setup"],"description":null}}},"pageContext":{"slug":"/argo-workflow-memo/","draft":false,"previous":{"fields":{"slug":"/julia-package-binary/"},"frontmatter":{"title":"C/C++のライブラリをJuliaのパッケージとして登録する(Julia 1.3以降)","draft":false}},"next":{"fields":{"slug":"/molecular-graph-toc/"},"frontmatter":{"title":"化学構造とグラフ理論","draft":false}}}}}