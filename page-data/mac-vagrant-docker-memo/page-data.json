{"componentChunkName":"component---src-templates-post-js","path":"/mac-vagrant-docker-memo/","result":{"data":{"site":{"siteMetadata":{"title":"mojaie.github.io","siteUrl":"https://mojaie.github.io","author":{"name":"Seiji Matsuoka","summary":"Cheminformatics, Biointeraction and Laboratory automation"},"license":"CC BY 4.0","licenseURL":"https://creativecommons.org/licenses/by/4.0/legalcode","social":{"twitter":"mojaie"}}},"markdownRemark":{"id":"810414ba-03e5-560e-82c0-262d95cd0c83","excerpt":"環境 MacOS 11.6.1 HomeBrew 3.3.8 VirtualBox 6.1.30 Vagrant 2.2.19 VirturalBox, vagrantインストール 途中で止まるので、システム環境設定->セキュリティとプライバシーからOracle America, Inc…","html":"<h3>環境</h3>\n<ul>\n<li>\n<p>MacOS 11.6.1</p>\n<ul>\n<li>HomeBrew 3.3.8</li>\n<li>VirtualBox 6.1.30</li>\n<li>Vagrant 2.2.19</li>\n</ul>\n</li>\n</ul>\n<h3>VirturalBox, vagrantインストール</h3>\n<div class=\"gatsby-highlight\" data-language=\"shell-session\"><pre class=\"language-shell-session\"><code class=\"language-shell-session\"><span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\">brew <span class=\"token function\">install</span> --cask virtualbox vagrant vagrant-manager</span></span></code></pre></div>\n<p>途中で止まるので、システム環境設定->セキュリティとプライバシーからOracle America, Inc.を許可する。</p>\n<p>VirtualBoxの有効化に一旦システム再起動が必要。再起動しないと以下のようにBooting VMで止まる。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">==&gt; default: Booting VM...\nThere was an error while executing `VBoxManage`, a CLI used by Vagrant\nfor controlling VirtualBox. The command and stderr is shown below.\n\nCommand: [&quot;startvm&quot;, &quot;dfba51e9-b76e-45bc-95d5-317f9f66156e&quot;, &quot;--type&quot;, &quot;headless&quot;]\n\nStderr: VBoxManage: error: The virtual machine &#39;vm-singularity-ce_default_1639961910582_55602&#39; has terminated unexpectedly during startup with exit code 1 (0x1)\nVBoxManage: error: Details: code NS_ERROR_FAILURE (0x80004005), component MachineWrap, interface IMachine</code></pre></div>\n<h3>Docker, Docker-composeのインストール</h3>\n<p>VM用フォルダを作成して移動</p>\n<div class=\"gatsby-highlight\" data-language=\"shell-session\"><pre class=\"language-shell-session\"><code class=\"language-shell-session\"><span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\"><span class=\"token function\">mkdir</span> vm-ubuntu</span></span>\n<span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\"><span class=\"token builtin class-name\">cd</span> vm-ubuntu</span></span>\n<span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\">vagrant init</span></span></code></pre></div>\n<p>vm-ubuntuフォルダ内にVagrantfileが作成される。テンプレートのコメントを参考に以下記述を追記。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  # Ubuntu 20.04.3 LTS\n  config.vm.box = &quot;ubuntu/focal64&quot;\n\n  # ポート転送が必要であれば\n  config.vm.network &quot;forwarded_port&quot;, guest: 5432, host: 5432\n  config.vm.network &quot;forwarded_port&quot;, guest: 3000, host: 3000\n\n  # DockerとDocker-composeのインストール\n  config.vm.provision &quot;docker&quot;\n  config.vm.provision &quot;shell&quot;, inline: &lt;&lt;-SHELL\n    apt update\n    mkdir -p /usr/local/lib/docker/cli-plugins\n    curl -L https://github.com/docker/compose/releases/download/v2.2.2/docker-compose-linux-x86_64 -o /usr/local/lib/docker/cli-plugins/docker-compose\n    chmod +x /usr/local/lib/docker/cli-plugins/docker-compose\n  SHELL</code></pre></div>\n<p>参考: Compose V2 and the new docker compose\n<a href=\"https://docs.docker.com/compose/cli-command/#install-on-linux\">https://docs.docker.com/compose/cli-command/#install-on-linux</a></p>\n<p>vagrant起動。Ubuntuのダウンロード容量が数GBあるので注意。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">vagrant up</code></pre></div>\n<p>仮想環境に接続して、インストールできていることを確認。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell-session\"><pre class=\"language-shell-session\"><code class=\"language-shell-session\"><span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\">vagrant <span class=\"token function\">ssh</span></span></span>\n<span class=\"token command\"><span class=\"token info punctuation\"><span class=\"token user\">vagrant@ubuntu-focal</span><span class=\"token punctuation\">:</span><span class=\"token path\">~</span></span><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\">docker --version</span></span>\n<span class=\"token output\">Docker version 20.10.12, build e91ed57\n</span><span class=\"token command\"><span class=\"token info punctuation\"><span class=\"token user\">vagrant@ubuntu-focal</span><span class=\"token punctuation\">:</span><span class=\"token path\">~</span></span><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\">docker compose version</span></span>\n<span class=\"token output\">Docker Compose version v2.2.2\n</span><span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\">vagrant <span class=\"token builtin class-name\">logout</span></span></span></code></pre></div>\n<p>インストールし直す場合は一旦vagrant destroy、rm Vagrantfileしてから再度vagrant init</p>\n<div class=\"gatsby-highlight\" data-language=\"shell-session\"><pre class=\"language-shell-session\"><code class=\"language-shell-session\"><span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\">vagrant destroy</span></span>\n<span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\"><span class=\"token function\">rm</span> Vagrantfile</span></span></code></pre></div>\n<p>その他vagrantのコマンド  </p>\n<ul>\n<li>vagrant reload: 既にVMが動いている時に、変更したVagrantfileを反映させる。provisionからやり直したい場合は <code class=\"language-text\">--provision</code>をつける</li>\n<li>vagrant suspend: VMを一時停止する。upで再開</li>\n<li>vagrant halt: VMをgracefully shutdownする</li>\n</ul>\n<h3>問題</h3>\n<ul>\n<li>ローカル->Vagrant->Dockerと2段階になるのでボリュームマウントなど権限まわりがつらい。PostgreSQLなど権限が面倒なものは厄介(postgresユーザをuid=999で決め打ち、初期化の際にpgdataの複雑な権限変更が必要)。</li>\n</ul>","fields":{"slug":"/mac-vagrant-docker-memo/"},"frontmatter":{"title":"MacOSでVirturalBox+vagrantでDocker環境","dateCreated":"December 28, 2021","dateModified":"December 28, 2021","tags":["Docker","environment setup","MacOS"],"description":null}},"file":null},"pageContext":{"slug":"/mac-vagrant-docker-memo/","draft":false,"image":null,"previous":{"fields":{"slug":"/singularity-memo/"},"frontmatter":{"title":"Singularityインストールメモ","image":null,"draft":false}},"next":{"fields":{"slug":"/environment-memo/"},"frontmatter":{"title":"作業環境構築メモ","image":null,"draft":false}}}},"staticQueryHashes":["2841359383","3266777773","401191528"]}