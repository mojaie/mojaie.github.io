{"componentChunkName":"component---src-templates-post-js","path":"/ubuntu-elabftw/","result":{"data":{"site":{"siteMetadata":{"title":"mojaie.github.io","siteUrl":"https://mojaie.github.io","author":{"name":"Seiji Matsuoka","summary":"Cheminformatics, Biointeraction and Laboratory automation"},"license":"CC BY 4.0","licenseURL":"https://creativecommons.org/licenses/by/4.0/legalcode","social":{"twitter":"mojaie"}}},"markdownRemark":{"id":"c2a2af63-bdab-5a20-840d-48527276a1ee","excerpt":"環境 Ubuntu 20.04.1 LTS (GNU/Linux 4.15.0-112-generic x86_64) Docker Ubuntu環境にDockerをインストール Install Docker Engine on Ubuntu\nhttps://docs.docker.com/engine/install…","html":"<h3>環境</h3>\n<ul>\n<li>Ubuntu 20.04.1 LTS (GNU/Linux 4.15.0-112-generic x86_64)</li>\n</ul>\n<h3>Docker</h3>\n<p>Ubuntu環境にDockerをインストール</p>\n<p>Install Docker Engine on Ubuntu\n<a href=\"https://docs.docker.com/engine/install/ubuntu/\">https://docs.docker.com/engine/install/ubuntu/</a></p>\n<p>まず既に入っているかもしれないdockerをremove。入っていませんでした。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell-session\"><pre class=\"language-shell-session\"><code class=\"language-shell-session\"><span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> remove docker docker-engine docker.io containerd runc</span></span></code></pre></div>\n<p>必要なパッケージをインストールします。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell-session\"><pre class=\"language-shell-session\"><code class=\"language-shell-session\"><span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> update</span></span>\n<span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> </span></span><span class=\"token output\">\\\n    apt-transport-https \\\n    ca-certificates \\\n    curl \\\n    gnupg-agent \\\n    software-properties-common</span></code></pre></div>\n<p>既に全て最新版になっていました。\nマニュアルに従ってGPGのダウンロード、確認を行います。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell-session\"><pre class=\"language-shell-session\"><code class=\"language-shell-session\"><span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\"><span class=\"token function\">curl</span> -fsSL https://download.docker.com/linux/ubuntu/gpg <span class=\"token operator\">|</span> <span class=\"token function\">sudo</span> apt-key <span class=\"token function\">add</span> -</span></span>\n<span class=\"token output\">OK\n</span><span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\"><span class=\"token function\">sudo</span> apt-key fingerprint 0EBFCD88</span></span>\n<span class=\"token output\">pub   rsa4096 2017-02-22 [SCEA]\n      9DC8 5822 9FC7 DD38 854A  E2D8 8D81 803C 0EBF CD88\nuid           [  不明  ] Docker Release (CE deb) &lt;docker@docker.com>\nsub   rsa4096 2017-02-22 [S]</span></code></pre></div>\n<p>DockerのパッケージリポジトリをUbuntuに追加します。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell-session\"><pre class=\"language-shell-session\"><code class=\"language-shell-session\"><span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\"><span class=\"token function\">sudo</span> add-apt-repository </span></span><span class=\"token output\">\\\n   \"deb [arch=amd64] https://download.docker.com/linux/ubuntu \\\n</span><span class=\"token info punctuation\">   </span><span class=\"token command\"><span class=\"token shell-symbol important\">$</span><span class=\"token bash language-bash\"><span class=\"token punctuation\">(</span>lsb_release -cs<span class=\"token punctuation\">)</span> </span></span><span class=\"token output\">\\\n   stable\"</span></code></pre></div>\n<p>Dockerをインストールします。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell-session\"><pre class=\"language-shell-session\"><code class=\"language-shell-session\"><span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> update</span></span>\n<span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> docker-ce docker-ce-cli containerd.io</span></span></code></pre></div>\n<p>Hello worldコンテナが起動できることを確認します。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell-session\"><pre class=\"language-shell-session\"><code class=\"language-shell-session\"><span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\"><span class=\"token function\">sudo</span> docker run hello-world</span></span>\n<span class=\"token output\">Unable to find image 'hello-world:latest' locally\nlatest: Pulling from library/hello-world\n0e03bdcc26d7: Pull complete \nDigest: sha256:7f0a9f93b4aa3022c3a4c147a449bf11e0941a1fd0bf4a8e6c9408b2600777c5\nStatus: Downloaded newer image for hello-world:latest\n\nHello from Docker!\nThis message shows that your installation appears to be working correctly.\n\nTo generate this message, Docker took the following steps:\n 1. The Docker client contacted the Docker daemon.\n 2. The Docker daemon pulled the \"hello-world\" image from the Docker Hub.\n    (amd64)\n 3. The Docker daemon created a new container from that image which runs the\n    executable that produces the output you are currently reading.\n 4. The Docker daemon streamed that output to the Docker client, which sent it\n    to your terminal.\n\nTo try something more ambitious, you can run an Ubuntu container with:\n</span><span class=\"token info punctuation\"> </span><span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\">docker run -it ubuntu <span class=\"token function\">bash</span></span></span>\n\n<span class=\"token output\">Share images, automate workflows, and more with a free Docker ID:\n https://hub.docker.com/\n\nFor more examples and ideas, visit:\n https://docs.docker.com/get-started/</span></code></pre></div>\n<p>sudoをつけるのが面倒な場合はdockerグループに現ユーザを追加します。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell-session\"><pre class=\"language-shell-session\"><code class=\"language-shell-session\"><span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">groupadd</span> docker</span></span>\n<span class=\"token output\">groupadd: グループ 'docker' は既に存在します</span></code></pre></div>\n<p>dockerをインストールした時点でグループが作成されていることもあるようです。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell-session\"><pre class=\"language-shell-session\"><code class=\"language-shell-session\"><span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">usermod</span> -aG docker <span class=\"token environment constant\">$USER</span></span></span>\n<span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\"><span class=\"token function\">cat</span> /etc/group</span></span>\n<span class=\"token output\">root:x:0:\ndaemon:x:1:\n\n...\n\ndocker:x:999:user</span></code></pre></div>\n<p>グループにユーザを追加したら再起動します。Dockerがsudoなしで使用できるようになっています。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell-session\"><pre class=\"language-shell-session\"><code class=\"language-shell-session\"><span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">reboot</span></span></span>\n<span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\">docker run hello-world</span></span></code></pre></div>\n<h3>elabFTW</h3>\n<p>上述の通り、sudoなしでdocker起動できるようにしておきます。UbuntuにはSNAPというパッケージ管理システムがありますが、SNAPでインストールしたdockerは利用できないようです。上述の通り、Dockerリポジトリ経由でインストールします。</p>\n<p>マニュアルの通り、elabFTWのインストールスクリプトをダウンロードして実行します。ただ、/usr/local/bin/を汚染したくないのでホームから直接スクリプトを起動します。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell-session\"><pre class=\"language-shell-session\"><code class=\"language-shell-session\"><span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\"><span class=\"token function\">curl</span> -sL https://get.elabftw.net -o elabctl <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">chmod</span> +x elabctl</span></span>\n<span class=\"token output\">sudo ./elabctl install\n      _          _     _____ _______        __\n  ___| |    __ _| |__ |  ___|_   _\\ \\      / /\n / _ \\ |   / _| | '_ \\| |_    | |  \\ \\ /\\ / / \n|  __/ |__| (_| | |_) |  _|   | |   \\ V  V /  \n \\___|_____\\__,_|_.__/|_|     |_|    \\_/\\_/   \n                                              \n\nUsing elabctl configuration file: using default values (no config file found)\nUsing elabftw configuration file: /etc/elabftw.yml\n---------------------------------------------\nError: docker-compose not installed. Please install the program 'docker-compose'</span></code></pre></div>\n<p>docker-composeが必須のようです。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell-session\"><pre class=\"language-shell-session\"><code class=\"language-shell-session\"><span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> docker-compose</span></span></code></pre></div>\n<p>気を取り直して再度インストールを試みます。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell-session\"><pre class=\"language-shell-session\"><code class=\"language-shell-session\"><span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\"><span class=\"token function\">sudo</span> ./elabctl <span class=\"token function\">install</span></span></span></code></pre></div>\n<p>GUIウィザード風の画面が出てきてびびりますが、適当に回答します。</p>\n<ul>\n<li>了解</li>\n<li>Looks good to me</li>\n<li>Server</li>\n<li>はい</li>\n<li>自分のドメインネームを入力->了解</li>\n<li>Use HTTPS (下記注)</li>\n<li>Use self-signed</li>\n<li>了解</li>\n<li>了解</li>\n</ul>\n<p>基本的にはウィザードの言いなりで大丈夫です(あとでどうせdocker-composeの設定ファイルをいじります)。注意が必要なのは、タイムスタンプ発行にSSLが必須なので、HTTPSを使うかどうかの選択肢は実質Use HTTPSの一択です。HTTPにするのはSSL証明書を発行している他のNginxサーバ等を介して外部に接続している場合のみです。</p>\n<p>SSL証明書はletsencrypt等で調達するのが楽とのことですが、ネットワークの管理権限がない場合は証明書を取得することができません。今回はイントラネット内のみの使用(外部からのアクセスはVPN)を想定しているので、self-signed certificate(いわゆるオレオレ証明書)を利用します。</p>\n<p>次に、設定ファイルを編集します。docker-composeファイルです。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell-session\"><pre class=\"language-shell-session\"><code class=\"language-shell-session\"><span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">vi</span> /etc/elabftw.yml</span></span></code></pre></div>\n<p>ほぼ書き換えるところはないですが、今回letsencryptを使わないので</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">ENABLE_LETSENCRYPT=false</code></pre></div>\n<p>にします。ENABLE_LETSENCRYPT=falseとDISABLE_HTTPS=falseが指定してあると、自動的にself-signed certificateを生成するそうです。</p>\n<p>あと、タイムゾーンを指定します。TZはmysqlの設定の方にもあります。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">PHP_TIMEZONE=Asia/Tokyo\nTZ=Asia/Tokyo</code></pre></div>\n<p>サーバへの接続に使用するポート(hostのほう)を設定します。他とかぶってなければのままで大丈夫です(今回同ドメインの他のサーバとの区別のため変更しています)。コンテナ側のportは443で固定です。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">ports:\n        # if you want elabftw to run on a different port, change the first number\n        # host:container\n        - &#39;3101:443&#39;</code></pre></div>\n<p>ウィザードで設定していない場合手動でサーバ名を入力します。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># optional: change to your server name in nginx config\n        - SERVER_NAME=server.com</code></pre></div>\n<p>startコマンドを実行すると、MySQLのスキーマが作成されます。続けて、サーバのDockerコンテナを起動します。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell-session\"><pre class=\"language-shell-session\"><code class=\"language-shell-session\"><span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\"><span class=\"token function\">sudo</span> ./elabctl start</span></span>\n<span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\">docker <span class=\"token builtin class-name\">exec</span> -it elabftw bin/install start</span></span></code></pre></div>\n<p>設定ファイルを書き換えるなどした際は、restartすることでコンテナが最新の状態になります。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell-session\"><pre class=\"language-shell-session\"><code class=\"language-shell-session\"><span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\"><span class=\"token function\">sudo</span> ./elabctl restart</span></span></code></pre></div>\n<p>https://サーバ名:3101/register.phpにアクセスしてアカウントを作成します。\nChromeだとNET::ERR_CERT_INVALIDで怒られるので、ページの背景の適当なところをクリックして(ウィンドウがアクティブかつ入力カーソルが出ていない状態で)、thisisunsafeとタイプします。</p>\n<p>thisisunsafe関連<br>\n<a href=\"https://www.google.com/search?q=Chrome+thisisunsafe\">https://www.google.com/search?q=Chrome+thisisunsafe</a></p>\n<h3>mkcertでブラウザの警告を解除する</h3>\n<p>毎回ブラウザで警告が出るのは面倒なので、mkcertを使用してローカル環境でのみ有効なSSL証明書を発行します。公式ドキュメントにもインストラクションがあります。</p>\n<p><a href=\"https://doc.elabftw.net/contributing.html?highlight=certificate#using-a-trusted-certificate-for-local-dev\">https://doc.elabftw.net/contributing.html?highlight=certificate#using-a-trusted-certificate-for-local-dev</a></p>\n<p>Homebrewがない場合はHomebrewをインストールします。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell-session\"><pre class=\"language-shell-session\"><code class=\"language-shell-session\"><span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\">/bin/bash -c <span class=\"token string\">\"<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">curl</span> -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh<span class=\"token variable\">)</span></span>\"</span></span></span>\n<span class=\"token output\">==> Select the Homebrew installation directory\n- Enter your password to install to /home/linuxbrew/.linuxbrew (recommended)\n- Press Control-D to install to /home/user/.linuxbrew\n- Press Control-C to cancel installation\n[sudo] server のパスワード:</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"shell-session\"><pre class=\"language-shell-session\"><code class=\"language-shell-session\"><span class=\"token output\">==> This script will install:\n/home/linuxbrew/.linuxbrew/bin/brew\n/home/linuxbrew/.linuxbrew/share/doc/homebrew\n...\n/home/linuxbrew/.linuxbrew/Homebrew\n/home/linuxbrew/.linuxbrew/Frameworks\n\nPress RETURN to continue or any other key to abort</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"shell-session\"><pre class=\"language-shell-session\"><code class=\"language-shell-session\"><span class=\"token output\">==> /usr/bin/sudo /bin/mkdir -p /home/linuxbrew/.linuxbrew\n...\nWarning: /home/linuxbrew/.linuxbrew/bin is not in your PATH.\n==> Installation successful!\n\n==> Homebrew has enabled anonymous aggregate formulae and cask analytics.\nRead the analytics documentation (and how to opt-out) here:\n  https://docs.brew.sh/Analytics\nNo analytics data has been sent yet (or will be during this `install` run).\n\n==> Homebrew is run entirely by unpaid volunteers. Please consider donating:\n</span><span class=\"token info punctuation\">  https<span class=\"token punctuation\">:</span><span class=\"token path\">//github.com/Homebrew/brew</span></span><span class=\"token command\"><span class=\"token shell-symbol important\">#</span><span class=\"token bash language-bash\">donations</span></span>\n\n<span class=\"token output\">==> Next steps:\n- Run `brew help` to get started\n- Further documentation: \n    https://docs.brew.sh\n- Install the Homebrew dependencies if you have sudo access:\n    sudo apt-get install build-essential\n    See https://docs.brew.sh/linux for more information\n- Add Homebrew to your PATH in /home/user/.profile:\n</span><span class=\"token info punctuation\">    echo 'eval </span><span class=\"token command\"><span class=\"token shell-symbol important\">$</span><span class=\"token bash language-bash\"><span class=\"token punctuation\">(</span>/home/linuxbrew/.linuxbrew/bin/brew shellenv<span class=\"token punctuation\">)</span></span></span><span class=\"token output\">' >> /home/user/.profile\n</span><span class=\"token info punctuation\">    eval </span><span class=\"token command\"><span class=\"token shell-symbol important\">$</span><span class=\"token bash language-bash\"><span class=\"token punctuation\">(</span>/home/linuxbrew/.linuxbrew/bin/brew shellenv<span class=\"token punctuation\">)</span></span></span>\n<span class=\"token output\">- We recommend that you install GCC:\n    brew install gcc</span></code></pre></div>\n<p>Next stepsの説明に従ってパスを通します。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell-session\"><pre class=\"language-shell-session\"><code class=\"language-shell-session\"><span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\"><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'eval <span class=\"token variable\"><span class=\"token variable\">$(</span>/home/linuxbrew/.linuxbrew/bin/brew shellenv<span class=\"token variable\">)</span></span>'</span> <span class=\"token operator\">>></span> /home/user/.profile</span></span></code></pre></div>\n<p>シェルを再起動してインストールできていることを確認します。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell-session\"><pre class=\"language-shell-session\"><code class=\"language-shell-session\"><span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\"><span class=\"token function\">which</span> brew</span></span>\n<span class=\"token output\">/home/linuxbrew/.linuxbrew/bin/brew</span></code></pre></div>\n<p>依存モジュールをインストールします(既にインストール済みでした)。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell-session\"><pre class=\"language-shell-session\"><code class=\"language-shell-session\"><span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> build-essential <span class=\"token function\">curl</span> <span class=\"token function\">file</span> <span class=\"token function\">git</span></span></span></code></pre></div>\n<p>libnss3-toolsをインストールします。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell-session\"><pre class=\"language-shell-session\"><code class=\"language-shell-session\"><span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> libnss3-tools</span></span></code></pre></div>\n<p>mkcertをbrewでインストールします。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell-session\"><pre class=\"language-shell-session\"><code class=\"language-shell-session\"><span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\">brew <span class=\"token function\">install</span> mkcert</span></span></code></pre></div>\n<p>mkcertをインストールします。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell-session\"><pre class=\"language-shell-session\"><code class=\"language-shell-session\"><span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\">mkcert -install</span></span>\n<span class=\"token output\">Created a new local CA at \"/home/user/.local/share/mkcert\" 💥\nThe local CA is now installed in the system trust store! ⚡️\nThe local CA is now installed in the Firefox and/or Chrome/Chromium trust store (requires browser restart)! 🦊</span></code></pre></div>\n<p>サーバ証明書と秘密鍵を生成します。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell-session\"><pre class=\"language-shell-session\"><code class=\"language-shell-session\"><span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\">mkcert server.com</span></span>\n<span class=\"token output\">Using the local CA at \"/home/user/.local/share/mkcert\" ✨\n\nCreated a new certificate valid for the following names 📜\n - \"server.com\"\n\nThe certificate is at \"./server.com.pem\" and the key at \"./server.com-key.pem\" ✅</span></code></pre></div>\n<p>証明書のディレクトリにサーバ証明書と秘密鍵を移動します。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell-session\"><pre class=\"language-shell-session\"><code class=\"language-shell-session\"><span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">mkdir</span> /etc/letsencrypt/live</span></span>\n<span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">mv</span> server.com.pem /etc/letsencrypt/live/server.com/fullchain.pem</span></span>\n<span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">mv</span> server.com-key.pem /etc/letsencrypt/live/server.com/privkey.pem</span></span></code></pre></div>\n<p>/etc/elabftw.ymlの設定ファイルを更新します。ENABLE_LETSENCRYPT=trueにして、volumesにsslのディレクトリを設定します。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># note: does nothing if DISABLE_HTTPS is set to true\n        - ENABLE_LETSENCRYPT=true\n...\n# if you have enabled letsencrypt, uncomment the line below\n# path to the folder with TLS certificate + private key\n# host:container\n        - /etc/letsencrypt:/ssl</code></pre></div>\n<p>サーバを再起動します。サーバでブラウザを起動可能であれば、ブラウザを再起動してアクセスすると警告が出なくなっています。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">sudo ./elabctl restart</code></pre></div>\n<p>一方で、サーバに接続する同じネットワークの端末からブラウザでアクセスするとNET::ERR_CERT_AUTHORITY_INVALIDになります。警告画面下部の詳細設定を開いて「server.comにアクセスする（安全ではありません）」をクリックすればでアクセスできるので、上述のNET::ERR_CERT_INVALIDよりは比較的マシです。</p>\n<p>内部的にはクライアントのルート証明書を偽装することで認証を回避しているようです。つまり、同じネットワークの他の端末からも警告が出ないようにするには、他の端末にもmkcertをインストールして、サーバで生成したルート証明書(場所はコマンド<code class=\"language-text\">mkcert -CAROOT</code>で確認できる)を設置する必要があります。</p>\n<h3>SMTP2GO</h3>\n<p>サーバからのシステムメール(パスワード変更など)を送るためのSMTPサーバの設定が必須です。postfix等で自前で作ってもいいですが、よほどSMTPに詳しくない限り、SMTP2GOなどの外部サービスを利用した方が楽で安全性も高いです。</p>\n<p>アカウントを作って説明通りに設定、テストメールを送信してみましたが、何も返ってきません…</p>\n<p>elabFTWのDockerコンテナにアクセスしてのNginxのログを見てみます。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell-session\"><pre class=\"language-shell-session\"><code class=\"language-shell-session\"><span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\">docker container <span class=\"token function\">ls</span></span></span>\n<span class=\"token output\">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                               NAMES\n47f3af8300de        mysql:5.7           \"docker-entrypoint.s…\"   6 hours ago         Up 6 hours          0.0.0.0:3306->3306/tcp, 33060/tcp   mysql\n7dc7c65a3a51        elabftw/elabimg     \"/run.sh\"                6 hours ago         Up 6 hours          0.0.0.0:3101->443/tcp               elabftw\n\n</span><span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\">docker <span class=\"token builtin class-name\">exec</span> -it 7dc7c65a3a51 /bin/bash</span></span>\n<span class=\"token info punctuation\">bash-5.0</span><span class=\"token command\"><span class=\"token shell-symbol important\">#</span> <span class=\"token bash language-bash\"><span class=\"token function\">less</span> /var/log/nginx/error.log</span></span></code></pre></div>\n<p>error.logの内容</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">2020/08/15 20:47:15 [error] 79#79: *185 FastCGI sent in stderr: &quot;PHP messa\nge: [2020-08-15T20:47:15.644515+09:00] elabftw.ERROR:  [{&quot;userid&quot;:&quot;1&quot;},{&quot;e\nxception&quot;:&quot;[object] (Swift_TransportException(code: 503): Expected respons\ne code 354 but got code \\&quot;503\\&quot;, with message \\&quot;503-All RCPT commands were\n rejected with this error:\\r\\n503-unable to verify sender address\\r\\n503 V\nalid RCPT command must precede DATA\\r\\n\\&quot; at /elabftw/vendor/swiftmailer/s\nwiftmailer/lib/classes/Swift/Transport/AbstractSmtpTransport.php:457)&quot;}] [\n]&quot; while reading response header from upstream, client: 172.31.19.57, serv\ner: server.com, request: &quot;POST /app/controllers/SysconfigAj\naxController.php HTTP/2.0&quot;, upstream: &quot;fastcgi://unix:/var/run/php-fpm.soc\nk:&quot;, host: &quot;server.com:3101&quot;</code></pre></div>\n<p>公式のヘルプで503-unable to verify sender addressについて調べてみると、どうやら架空のメールアドレスだったのがまずかったようです。そりゃそうか。</p>\n<p>What Do Your Email Delivery Errors Mean?\n<a href=\"https://www.smtp2go.com/blog/email-delivery-errors-mean/\">https://www.smtp2go.com/blog/email-delivery-errors-mean/</a></p>\n<p>普通に自分のアドレスにしたらテストメールを受信できました。</p>\n<h3>elabFTWを使ってみての所感</h3>\n<p>elabFTWの使い勝手としては(他のELNを使ったことはありませんが)、最低限の機能はありそうという感じでした。構造式やフリーハンド描画をWeb上で編集できるのは良いですね。</p>\n<p>ただ、日本語環境のサポートはまだ非常に弱いです。日本語フォントも最小セットしか入っておらずイマイチです。日本語で書いたノートのPDFを生成するためには、ユーザ設定でCJKフォントを有効にする必要があります。ただ、フォント埋め込みでPDFのサイズが少なくとも10MB以上になってしまう(mPDFというPHPのPDF変換ライブラリを採用しているようですが、全てのフォントを埋め込んでしまうようです…)ので、PDF/A準拠のオプション設定を外してフォント埋め込みをやめるしかないようです。</p>\n<p>デフォルトはHTMLエディタですが、ユーザ設定でMarkdown直書きも選択できます。ただ、こちらも日本語変換の改行キー押下をイベントとして認識し勝手にリストをオートフィルするなど、日本語環境が未整備です(私はAtomでMarkdownを書いてからWebエディタにペーストしています)。</p>\n<p>実験ノート記事の他にデータベースという記事形式があり、どちらも同様の方法で記事作成が可能なのですが、実験ノートが実験事実の証明を目的としているのに対し、データベースは情報共有を目的としているようです。試薬の購入情報や文献調査を共有するのにも良さそうです。</p>","fields":{"slug":"/ubuntu-elabftw/"},"frontmatter":{"title":"Ubuntu20.04にelabFTWサーバ構築時のメモ","dateCreated":"August 15, 2020","dateModified":"September 05, 2020","tags":["SSH","remote","Ubuntu","Docker","ELN","environment setup"],"description":null}}},"pageContext":{"slug":"/ubuntu-elabftw/","draft":false,"previous":{"fields":{"slug":"/julia-package-cleanup/"},"frontmatter":{"title":"不要なJuliaのパッケージを削除して空き容量を確保する","draft":false}},"next":{"fields":{"slug":"/remove_nbextensions/"},"frontmatter":{"title":"jupyter_contrib_nbextensionsを削除する","draft":false}}}}}