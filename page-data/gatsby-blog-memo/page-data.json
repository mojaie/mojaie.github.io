{"componentChunkName":"component---src-templates-post-js","path":"/gatsby-blog-memo/","result":{"data":{"site":{"siteMetadata":{"title":"mojaie.github.io","siteUrl":"https://mojaie.github.io","author":{"name":"Seiji Matsuoka","summary":"Cheminformatics, Biointeraction and Laboratory automation"},"license":"CC BY 4.0","licenseURL":"https://creativecommons.org/licenses/by/4.0/legalcode","social":{"twitter":"mojaie"}}},"markdownRemark":{"id":"95b1373b-e74a-566f-8d30-d4ed8712836b","excerpt":"Gatsbyでこのサイト(mojaie.github.io)を構築した際の備忘録です。 Gatsby http://gatsbyjs.org/ 導入経緯 ブログ用の静的サイトジェネレータとしてJekyllを以前使用していましたが、機能拡張のために新しくRuby…","html":"<p>Gatsbyでこのサイト(mojaie.github.io)を構築した際の備忘録です。</p>\n<p>Gatsby<br>\n<a href=\"http://gatsbyjs.org/\">http://gatsbyjs.org/</a></p>\n<h3>導入経緯</h3>\n<p>ブログ用の静的サイトジェネレータとしてJekyllを以前使用していましたが、機能拡張のために新しくRubyを習得するのが面倒で、最近は他にもっとビルドが速いジェネレータがあるらしいということで乗り換えを検討することにしました。</p>\n<p>HUGO、MetalSmith、Gatsbyを試してみましたが、GatsbyはReactとGraphQLベースで内部の仕組みが直感的に理解しやすく、ドキュメントもかなり充実しているので、当面Gatsbyで進めていきたいと思います。</p>\n<h3>前提</h3>\n<ul>\n<li>\n<p>Node.js</p>\n<p>GatsbyのプロジェクトはNode.jsのパッケージとして作成します。Node.jsがない場合はHomeBrewあるいはAnaconda等でインストールしておきます。</p>\n</li>\n</ul>\n<h3>導入の流れ</h3>\n<ol>\n<li>\n<p><strong>Node.js, gatsby-cliをインストールする</strong></p>\n<p>gatsbyコマンドをコマンドラインから使用するために、npmもしくはyarnでNode.jsのグローバルにgatsby-cliをインストールします。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">yarn install -g gatsby-cli</code></pre></div>\n<p>主要なgatsbyのコマンド(developやserveなど)は後述のスターターから作成したプロジェクトのpackage.jsonのscriptに記載されていて、ローカルでは<code class=\"language-text\">npm run</code>や<code class=\"language-text\">yarn</code>で呼び出すことができます。実質、グローバルからgatsbyコマンドを実行するのは、newコマンドでプロジェクトを作成する時のみです。</p>\n</li>\n<li>\n<p><strong>好きなスターター(starter)を選ぶ</strong></p>\n<p>スターター(starter)と呼ばれるGatsbyプロジェクトのテンプレートがGitリポジトリとして公開されているので、<code class=\"language-text\">gatsby new</code>でcloneしてプロジェクトを作成します。当サイトはgatsby-starter-blogというスターターを元に作成しています。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">gatsby new gatsby-starter-blog https://github.com/gatsbyjs/gatsby-starter-blog</code></pre></div>\n<p>他のサイトジェネレータのようにテーマを選んで着せ替えるというよりは、最初にcloneした叩き台を元に自分で必要な機能を肉付けしていくというイメージです。gatsby本体やデフォルトのプラグインはnewコマンドでプロジェクトを作成した際に依存パッケージとしてインストールされます。</p>\n</li>\n<li>\n<p><strong>機能追加、カスタマイズ</strong></p>\n<p>srcフォルダのスクリプトやスタイルシートを編集してデザインの変更や機能追加を行います。タグやカテゴリのような機能はプラグインとして公開されているものもありますが、公式ドキュメントのチュートリアルにしたがって簡単に実装可能です。</p>\n</li>\n<li>\n<p><strong>記事を書く</strong></p>\n<p>Markdownで記事を書きます。frontmatterが利用可能で、フォーマットはJekyllやHugoなどと同様です。gatsby-starter-blogの場合、package.jsonに記載されたプラグインgatsby-transformer-remarkにより、remark.jsというパッケージを使用してMarkdownをパースします。他のプラグインを導入することでMarkdown以外のファイル形式も取り扱うことができます。</p>\n</li>\n<li>\n<p><strong>デプロイ(GitHub Pages)</strong></p>\n<p>公式チュートリアルにはNetlifyやGitHub Pages等へのデプロイの例が記載されています。当サイトはGitHub Pagesでホスティングしています。GitHub Pageへのデプロイにはgh-pagesパッケージを使用します。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">yarn install gh-pages</code></pre></div>\n<p>デプロイするリポジトリのmasterブランチを作成し、package.jsonのscriptに<code class=\"language-text\">&quot;deploy&quot;: &quot;gatsby build &amp;&amp; gh-pages -d public -b master&quot;</code>を記載しておきます。これで、<code class=\"language-text\">yarn deploy</code>によりプロジェクトのビルドとmasterへのpushが実行されます。</p>\n</li>\n</ol>\n<h3>スターター、プラグイン、テーマ</h3>\n<ul>\n<li>スターター(starter)はプロジェクトの骨子となるgitリポジトリ。ブログ、技術文書、物販サイトなどのテンプレートから用途に一番近いものを選んで<code class=\"language-text\">gatsby new</code>する。</li>\n<li>プラグイン(plugin)は拡張機能で、npmのモジュールとして提供される。Markdownパーサ、画像最適化、ルーティング、SEO、各種ブログパーツなど。</li>\n<li>テーマ(theme)はプラグインの一種。srcフォルダに複数のテーマを設置して使い分けることで用途別に複数のサイトを運用可能。</li>\n</ul>\n<h3>Gatsbyプロジェクトの構造</h3>\n<ul>\n<li>\n<p><strong>プロジェクトのルートディレクトリにあるもの</strong></p>\n<ul>\n<li><strong>gatsby-config.js:</strong> サイトのメタデータ、各種プラグイン設定など。</li>\n<li><strong>gatsby-browser.js:</strong> グローバルCSSやフォントの呼び出し、ルーティングの設定など。</li>\n<li><strong>gatsby-node.js:</strong> contentフォルダのファイルをパースしてページを生成しサイトを構築するスクリプト。</li>\n</ul>\n</li>\n<li><strong>contentフォルダ:</strong> Markdownファイルや画像など、サイトのコンテンツを格納</li>\n<li><strong>srcフォルダ:</strong> Reactコンポーネントや各ページのCSSを格納</li>\n<li><strong>staticフォルダ:</strong> サイトの自動生成に関与しないファイル。favicon.icoやrobot.txtなど生成したサイトでそのまま使うファイル。</li>\n<li><strong>node_modules:</strong> Gatsbyのプラグインなど、Node.jsのモジュールが格納されている。</li>\n<li><strong>public:</strong> Gatsbyで自動生成したサイト。</li>\n</ul>\n<h3>ビルドプロセスの中身</h3>\n<p><code class=\"language-text\">gatsby build</code>した際の挙動。</p>\n<p>Gatsby Lifecycle APIs<br>\n<a href=\"https://www.gatsbyjs.org/docs/gatsby-lifecycle-apis/\">https://www.gatsbyjs.org/docs/gatsby-lifecycle-apis/</a></p>\n<h3>主なgatsbyコマンド</h3>\n<ul>\n<li><code class=\"language-text\">gatsby build</code>: ビルドのみ実施。publicフォルダにファイルが生成される。</li>\n<li><code class=\"language-text\">gatsby clean</code>: ビルドしたデータを削除する。</li>\n<li><code class=\"language-text\">gatsby develop</code>: 開発用サーバを起動する(process.env.NODE_ENV = development)。ビルドはしない。稼働中はファイルを変更するたびにホットリロードされてサイトに変更が即時反映される。</li>\n<li><code class=\"language-text\">gatsby serve</code>: ビルドしたサイトのサーバを起動する(process.env.NODE_ENV = production)。デプロイ前の確認用。</li>\n</ul>","fields":{"slug":"/gatsby-blog-memo/"},"frontmatter":{"title":"Gatsbyでブログを構築した際の備忘録","dateCreated":"April 27, 2020","dateModified":"April 30, 2020","tags":["Gatsby","React","GraphQL","static site generator"],"description":null}}},"pageContext":{"slug":"/gatsby-blog-memo/","previous":{"fields":{"slug":"/julia-package-publish/"},"frontmatter":{"title":"Juliaでパッケージを作成して公開する"}},"next":{"fields":{"slug":"/molecular-graph-intro/"},"frontmatter":{"title":"化学構造とグラフ理論(1): 化学のデータを取り扱う"}}}}}