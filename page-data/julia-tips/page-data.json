{"componentChunkName":"component---src-templates-post-js","path":"/julia-tips/","result":{"data":{"site":{"siteMetadata":{"title":"mojaie.github.io","siteUrl":"https://mojaie.github.io","author":{"name":"Seiji Matsuoka","summary":"Cheminformatics, Biointeraction and Laboratory automation"},"license":"CC BY 4.0","licenseURL":"https://creativecommons.org/licenses/by/4.0/legalcode","social":{"twitter":"mojaie"}}},"markdownRemark":{"id":"afa5f689-99d9-58f2-8330-45b36e38304f","excerpt":"Juliaのパッケージ開発に関する小ネタ集。\n増えてきたらそれぞれ個別記事を作成予定。 Ref{T}とPtr{T} RefもPtrもメモリアドレスを指し示す値を格納するオブジェクトの型 それぞれC++における参照とポインタの概念に近い? Ref Ref…","html":"<p>Juliaのパッケージ開発に関する小ネタ集。\n増えてきたらそれぞれ個別記事を作成予定。</p>\n<h3>Ref{T}とPtr{T}</h3>\n<ul>\n<li>RefもPtrもメモリアドレスを指し示す値を格納するオブジェクトの型</li>\n<li>それぞれC++における参照とポインタの概念に近い?</li>\n<li>\n<p>Ref</p>\n<ul>\n<li>Refによる参照は<code class=\"language-text\">Ref(x)</code>で作成</li>\n<li>参照先のオブジェクトの取得(デリファレンス)は<code class=\"language-text\">[]</code></li>\n<li>Refは必ずJuliaのオブジェクトが格納された有効なアドレスを示すので、Ptrより安全</li>\n<li>単に参照を使いたい場合はRefの方がいい</li>\n</ul>\n</li>\n<li>\n<p>Ptr</p>\n<ul>\n<li>Ptrを使うのは特にCやC++のライブラリAPIがポインタ渡しを要求する場合</li>\n<li><code class=\"language-text\">pointer(x)</code>で作成</li>\n<li>Refと異なりアドレスがNULLを指すことがあるので安全ではない</li>\n<li>デリファレンスの関数は<code class=\"language-text\">unsafe_load</code>、<code class=\"language-text\">unsafe_string</code>など、unsafeが付く</li>\n</ul>\n</li>\n<li>PtrはRefのサブタイプ(<code class=\"language-text\">Ptr &lt;: Ref</code>はtrue)</li>\n</ul>\n<h3>開発中のパッケージのリロード</h3>\n<p>dev</p>\n<h3>Revise.jl</h3>\n<p>edit(function)\nマクロとかを使ってると機能しない</p>\n<p>ライブラリの再読み込みの場合は\nRevise.track(MolecularGraph)\nマクロも行けるのでパッケージ開発のばあいはこっちの方が無難</p>\n<h3>Benchmark.jl</h3>\n<h3>メタプロ</h3>\n<ul>\n<li>\n<p>Exprの作り方</p>\n<ul>\n<li>シンボル:()</li>\n<li>quoteブロック</li>\n<li>Meta.parseでstringから</li>\n</ul>\n</li>\n<li>Exprの評価はeval()</li>\n</ul>\n<p>内挿とエスケープ</p>\n<p>マクロ</p>\n<h3>イテレータ関連</h3>\n<h4>maxとかが空の配列の時エラーになる</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">reduce(+, values(b), init=0)</code></pre></div>\n<h4>minやmaxのソート順を固定する</h4>\n<div class=\"gatsby-highlight\" data-language=\"julia\"><pre class=\"language-julia\"><code class=\"language-julia\"><span class=\"token keyword\">function</span> sortstablemax<span class=\"token punctuation\">(</span>iter<span class=\"token punctuation\">;</span> by<span class=\"token operator\">=</span>identity<span class=\"token punctuation\">,</span> kwargs<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span>\n    cmp<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> by<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> by<span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span> ? y <span class=\"token punctuation\">:</span> x\n    <span class=\"token keyword\">return</span> reduce<span class=\"token punctuation\">(</span>cmp<span class=\"token punctuation\">,</span> iter<span class=\"token punctuation\">;</span> kwargs<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span>\n\n\n<span class=\"token keyword\">function</span> sortstablemin<span class=\"token punctuation\">(</span>iter<span class=\"token punctuation\">;</span> by<span class=\"token operator\">=</span>identity<span class=\"token punctuation\">,</span> kwargs<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span>\n    cmp<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> by<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> by<span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span> ? y <span class=\"token punctuation\">:</span> x\n    <span class=\"token keyword\">return</span> reduce<span class=\"token punctuation\">(</span>cmp<span class=\"token punctuation\">,</span> iter<span class=\"token punctuation\">;</span> kwargs<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<h4>DictとSet</h4>\n<p>Juliaではコンテナ型の種類に関わらず<code class=\"language-text\">in</code>や<code class=\"language-text\">intersection</code>、<code class=\"language-text\">union</code>などが使えてしまうので注意が必要。</p>\n<h3>Array</h3>\n<ul>\n<li><code class=\"language-text\">in</code> によるルックアップや<code class=\"language-text\">intersection</code>、<code class=\"language-text\">union</code>など集合関連の操作も可能だが、遅い。</li>\n<li>要素の順序にしたがって連続的にメモリが確保されており、ブロードキャストが高速</li>\n</ul>\n<h3>DictとSet</h3>\n<ul>\n<li>SetはDictを使って実装されている(Set{T}の中身はDict{T,Nothing})。</li>\n<li>keys(dict)はBase.KeySetというAbstractSetのサブクラスのオブジェクトを返す</li>\n<li>一方values(dist)はBase.ValueIteratorというただのイテレータを返す</li>\n<li>DictのキーとSetはハッシュマップで実装されているので、<code class=\"language-text\">in</code>がO(1)、集合関連の関数が速い。</li>\n<li>ブロードキャストは遅い</li>\n<li>indexが必要な操作ができない</li>\n<li>オブジェクト生成のオーバーヘッドがArrayより大きい?</li>\n</ul>\n<h3>検証コード</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">a = 1:2:1000000\nb = 1:3:1000000\n\n@time　aarr = collect(a)\n@time　aset = Set(a)\n@time　barr = collect(a)\n@time　bset = Set(a)\n@time intersect(aset, bset)\n@time union(aset, bset)\n@time 777777 in aset\n@time abs.(aset)\n@time [abs(e) for e in aset]</code></pre></div>","fields":{"slug":"/julia-tips/"},"frontmatter":{"title":"Juliaの開発Tips","dateCreated":"June 23, 2020","dateModified":"August 03, 2020","tags":["Julialang"],"description":null}}},"pageContext":{"slug":"/julia-tips/","draft":false,"previous":{"fields":{"slug":"/postgrest-memo/"},"frontmatter":{"title":"PostgRESTメモ","draft":false}},"next":{"fields":{"slug":"/rabbitmq-c-memo/"},"frontmatter":{"title":"rabbitmq Cクライアントメモ","draft":false}}}}}