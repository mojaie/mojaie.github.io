{"componentChunkName":"component---src-templates-post-js","path":"/environment-memo/","result":{"data":{"site":{"siteMetadata":{"title":"mojaie.github.io","siteUrl":"https://mojaie.github.io","author":{"name":"Seiji Matsuoka","summary":"Cheminformatics, Biointeraction and Laboratory automation"},"license":"CC BY 4.0","licenseURL":"https://creativecommons.org/licenses/by/4.0/legalcode","social":{"twitter":"mojaie"}}},"markdownRemark":{"id":"7a96216f-50e1-589f-811f-a874c8de1486","excerpt":"アプリケーション 公式サイトからダウンロード Google Chrome Sophos (自宅のみ) Symantec (職場のみ) Box Google Drive (自宅のみ) Atom Sourcetree Zotero Tutanota (自宅のみ) InkScape Docker Knime Marvin…","html":"<h3>アプリケーション</h3>\n<h4>公式サイトからダウンロード</h4>\n<ul>\n<li>Google Chrome</li>\n<li>Sophos (自宅のみ)</li>\n<li>Symantec (職場のみ)</li>\n<li>Box</li>\n<li>Google Drive (自宅のみ)</li>\n<li>Atom</li>\n<li>Sourcetree</li>\n<li>Zotero</li>\n<li>Tutanota (自宅のみ)</li>\n<li>InkScape</li>\n<li>Docker</li>\n<li>Knime</li>\n<li>Marvin</li>\n<li>DeepL</li>\n<li>Tabula</li>\n<li>Julia最新版</li>\n<li>Zoom</li>\n<li>WebEX</li>\n<li>Microsoft Office</li>\n</ul>\n<h4>App storeからダウンロード</h4>\n<ul>\n<li>Taurine</li>\n<li>StuffIt Expander</li>\n<li>Microsoft Remote Desktop</li>\n</ul>\n<h4>アプリケーション設定</h4>\n<ul>\n<li>Sourcetree</li>\n</ul>\n<p>GitHubのOAuth情報をキーチェインに登録するため以下のコマンドを打つ</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">git config --global credential.helper osxkeychain</code></pre></div>\n<h3>開発環境</h3>\n<h4>localenv</h4>\n<p>localenvをcloneする。初回git使用時にコマンドラインツールのインストールを促されるのでインストールする。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">cd ~/Workspace\ngit clone https://github.com/mojaie/localenv.git</code></pre></div>\n<p>.zshrcのシンボリックリンクを作成</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">cd ~\nln -s ~/Workspace/localenv/.zshrc</code></pre></div>\n<h4>Homebrew</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">mkdir .homebrew &amp;&amp; curl -L https://github.com/Homebrew/brew/tarball/master | tar xz --strip 1 -C .homebrew\nbrew update\nbrew doctor</code></pre></div>\n<ul>\n<li>XQuartzが必要であればcaskで入れる。</li>\n<li>cmakeはmacにデフォルトでインストールされていない。C++ビルドに必須。</li>\n<li>OpenSSLも何かと必要(MacOSデフォルトはLibreSSL)</li>\n<li>rsyncはmacデフォルトにもあるがbrewで3.0系を入れる</li>\n<li>noclamshellでクラムシェルモードを無効化</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># brew cask install xquartz\nbrew install cmake\nbrew install openssl\nbrew install rsync\nbrew install pirj/homebrew-noclamshell/noclamshell\nbrew services start noclamshell</code></pre></div>\n<h4>VSCodium</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">brew cask install vscodium</code></pre></div>\n<p>Extensionを入れる</p>\n<ul>\n<li>Julia</li>\n<li>Zenkaku (マーケットプレイスから手動)</li>\n</ul>\n<h4>Python</h4>\n<ul>\n<li>pyenvとPoetryを使う(Poetry単独だと2.7系のシステムPythonを使おうとする)</li>\n<li>Julia関連(IJuliaやPyCallなど)はなぜかConda.jlのpythonを推すので要検討</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">brew install pyenv\npyenv install --list\npyenv install [listで確認したバージョン]\npyenv global [listで確認したバージョン]\n\n# .zshrcでパスを通す\necho -e &#39;if command -v pyenv 1&gt;/dev/null 2&gt;&amp;1; then\\n  eval &quot;$(pyenv init -)&quot;\\nfi&#39; &gt;&gt; ~/.zshrc\n\n# flake8はAtomで使うのでglobalインストール\npip install flake8\n\n# poetry\ncurl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python\n# poetryにパスを通す\n# Node風にローカルでパッケージを管理\npoetry config virtualenvs.in-project true\n\n# それぞれのプロジェクトでpyproject.tomlをinstantiateする\npoetry install</code></pre></div>\n<p>Jupyter notebookを使うプロジェクトを新規作成する場合</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">poetry new projectname\npoetry add jupyter\npoetry add jupytext</code></pre></div>\n<h3>Julia</h3>\n<ul>\n<li>Mac版公式アプリケーションをダウンロードしてインストール</li>\n<li>実行可能バイナリにパスを通す(localenvの.zshrcに記載済み)</li>\n<li>デフォルトプロジェクトに必要なライブラリをインストール</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">add IJulia\nadd Revise\n\n# add BinaryBuilder\n# add PackageCompiler\n# add Plots\n# add MassInstallAction</code></pre></div>\n<p>Jupyterのカーネルが登録されているか確認</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">poetry run jupyter kernelspec list</code></pre></div>\n<p>カーネルが入ってないことがある?一旦プレコンパイルが必要?(要確認)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">using IJulia</code></pre></div>\n<h4>TODO: カスタムデフォルトsysimageからの起動</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">cd $LOCAL\ncreate_sysimage(:Plots, sysimage_path=&quot;sysimage/sys_plots.dylib&quot;, precompile_execution_file=&quot;script/precompile_plots.jl&quot;)</code></pre></div>\n<h3>Node.js</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">brew install node\nnpm install -g yarn\nyarn global add eslint</code></pre></div>\n<h3>PyMol</h3>\n<ul>\n<li>TODO: ラボォ氏のテキストを参考に構築、もしくはDocker</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">brew install homebrew/dupes/tcl-tk --enable-threads --with-x11  # for PyMol\nbrew install python --with-brewed-tk  # for PyMol\nbrew install homebrew/science/pymol</code></pre></div>\n<h3>その他</h3>\n<ul>\n<li>TODO: gromacsとかpsi4のdocker</li>\n</ul>\n<h3>KNIME</h3>\n<p>poetry newでknimeのワークスペースにpython環境を作る。numpyとpandasは必須</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">poetry add numpy\npoetry add pandas</code></pre></div>\n<p>Install KNIME Extensions…で下記拡張をインストール</p>\n<ul>\n<li>\n<p>KNIME Python Integration</p>\n<p>Preferences->KNIME->Pythonという項目ができているので、Python3のところに.venv内のpythonのパスを設定する(browseからpythonを選択するとエイリアスではなく参照元が設定されてしまうので、.venv内のpythonのパスを手打ちする)</p>\n</li>\n<li>\n<p>KNIME Report Designer</p>\n<p>レポート自動化</p>\n</li>\n<li>\n<p>KNIME Data Generation</p>\n<p>データ生成(連番など)</p>\n</li>\n<li>\n<p>KNIME Testing Framework UI</p>\n<p>テスト用ノード</p>\n</li>\n<li>ケモインフォのやつ</li>\n<li>HCS tools</li>\n<li>KNIME Image Processing</li>\n<li>\n<p>KNIME Image Processing - Python Extensions</p>\n<p>プレート統計、ヒートマップなど。まだ使うか微妙</p>\n</li>\n<li>\n<p>Streaming Execution</p>\n<p>ストリーミング(非同期実行)ができるようになる。</p>\n</li>\n</ul>\n<h4>KNIME (Windows編)</h4>\n<p>基本的には上記そのままインストール可能</p>\n<ul>\n<li>Pythonはminicondaをインストーラでインストールして、minicondaルートを指定</li>\n<li>conda installで必要なライブラリをインストール</li>\n<li>\n<p>Plotlyはorcaにパスを通す必要あり</p>\n<ul>\n<li>conda install -c plotly plotly-orca</li>\n<li>Windowsの環境変数でminicondaのルートを指定</li>\n</ul>\n</li>\n</ul>\n<h3>Selenium</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">poetry add selenium</code></pre></div>\n<p>chromedriver-binaryはchromeのバージョンに合わせる必要がある</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">poetry add chromedriver-binary＠87.0.4280.88.0</code></pre></div>\n<h3>Legacy</h3>\n<h4>Atom</h4>\n<p>VSCodiumへ移行済み。以下2019年以前の設定。</p>\n<p>設定ファイルの共有</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">cd ~/.atom\nln -s ~/Workspace/localenv/atom_settings/config.cson\nln -s ~/Workspace/localenv/atom_settings/styles.less\nln -s ~/Workspace/localenv/atom_settings/init.coffee</code></pre></div>\n<p>パッケージのインストール</p>\n<ul>\n<li>language-julia</li>\n<li>language-latex</li>\n<li>language-restructuredtext(不要？)</li>\n<li>latex</li>\n<li>linter</li>\n<li>linter-eslint</li>\n<li>linter-flake8</li>\n<li>linter-htmlhint</li>\n<li>show-ideographic-space</li>\n<li>split-diff</li>\n<li>rst-preview-pandoc(不要？)</li>\n</ul>\n<p>テーマのインストール</p>\n<ul>\n<li>seti-ui アイコンが良い</li>\n<li>predawn-syntax 見やすい</li>\n</ul>\n<h4>その他旧conda時代のPython環境</h4>\n<p>condaは使わない。RDKitはDocker使用。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">conda install rdkit -c rdkit  # vegaが先だとコンフリクトする？\n\n# Python開発\nconda install sphinx\n# sphinxcontrib-napoleonはビルトインになった\nconda install sphinx_rtd_theme\nconda install twine -c conda-forge\nconda install wheel -c conda-forge\n\n# Networkx2対応python-louvain\npip install git+https://github.com/taynaud/python-louvain.git@networkx2</code></pre></div>\n<h3>LaTeX</h3>\n<ul>\n<li>MacTeX公式からBasicTeX.pkgをダウンロードしてインストール</li>\n<li>/Library/TeX/texbinにパスを通す</li>\n<li>\n<p>TODO: brew cask install mactex</p>\n<ul>\n<li>ghostscriptもこれで入るらしい</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">sudo tlmgr update --self --all  # なんかエラー出る\nsudo tlmgr install latexmk    # pdf出力 デフォルトで入ってない\nsudo tlmgr install achemso    # ACSのフォーマット\nsudo tlmgr install mhchem     # achemso必須\nsudo tlmgr install chemgreek  # achemso必須\nsudo tlmgr install mciteplus  # achemso必須</code></pre></div>","fields":{"slug":"/environment-memo/"},"frontmatter":{"title":"作業環境構築メモ","dateCreated":"May 19, 2020","dateModified":"May 05, 2021","tags":["macOS","environment setup"],"description":null}},"file":null},"pageContext":{"slug":"/environment-memo/","draft":false,"image":null,"previous":{"fields":{"slug":"/no_clamshell/"},"frontmatter":{"title":"macOSでクラムシェルモードを無効化する","image":null,"draft":false}},"next":{"fields":{"slug":"/julia-notebook-parallel/"},"frontmatter":{"title":"Jupyter NotebookでJuliaをマルチスレッドで実行する","image":null,"draft":false}}}},"staticQueryHashes":["2841359383","3266777773","401191528"]}