{"componentChunkName":"component---src-templates-post-js","path":"/environment-memo/","result":{"data":{"site":{"siteMetadata":{"title":"mojaie.github.io","siteUrl":"https://mojaie.github.io","author":{"name":"Seiji Matsuoka","summary":"Cheminformatics, Biointeraction and Laboratory automation"},"license":"CC BY 4.0","licenseURL":"https://creativecommons.org/licenses/by/4.0/legalcode","social":{"twitter":"mojaie"}}},"markdownRemark":{"id":"4f8bcd84-0be1-5e99-b469-89e3caa24462","excerpt":"アプリケーション 公式サイトからダウンロード Sophos Tutanota Zoom Google Chrome Google Drive (自宅のみ) Dropbox Atom Sourcetree Mendeley Desktop InkScape Docker Knime Tabula Julia最新版 App…","html":"<h3>アプリケーション</h3>\n<h4>公式サイトからダウンロード</h4>\n<ul>\n<li>Sophos</li>\n<li>Tutanota</li>\n<li>Zoom</li>\n<li>Google Chrome</li>\n<li>Google Drive (自宅のみ)</li>\n<li>Dropbox</li>\n<li>Atom</li>\n<li>Sourcetree</li>\n<li>Mendeley Desktop</li>\n<li>InkScape</li>\n<li>Docker</li>\n<li>Knime</li>\n<li>Tabula</li>\n<li>Julia最新版</li>\n</ul>\n<h4>App storeからダウンロード</h4>\n<ul>\n<li>Taurine</li>\n<li>StuffIt Expander</li>\n</ul>\n<h4>Homebrew</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">mkdir .homebrew &amp;&amp; curl -L https://github.com/Homebrew/brew/tarball/master | tar xz --strip 1 -C .homebrew\nbrew update\nbrew doctor</code></pre></div>\n<p>brew doctorでxcodeがなければインストールするか聞かれるので入れる。XQuartzはcaskで入れる。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">brew cask install xquartz</code></pre></div>\n<h3>開発環境</h3>\n<h4>localenv</h4>\n<p>localenvをcloneする</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">cd ~/Workspace\ngit clone https://github.com/mojaie/localenv.git</code></pre></div>\n<p>.zshrcのシンボリックリンクを作成</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">cd ~\nln -s ~/Workspace/localenv/.zshrc</code></pre></div>\n<h4>Atom</h4>\n<p>設定ファイルの共有</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">cd ~/.atom\nln -s ~/Workspace/localenv/atom_settings/config.cson\nln -s ~/Workspace/localenv/atom_settings/styles.less\nln -s ~/Workspace/localenv/atom_settings/init.coffee</code></pre></div>\n<p>パッケージのインストール</p>\n<ul>\n<li>langage-julia</li>\n<li>langage-latex</li>\n<li>langage-restructuredtext</li>\n<li>latex</li>\n<li>linter</li>\n<li>linter-eslint</li>\n<li>linter-flake8</li>\n<li>linter-htmlhint</li>\n<li>show-ideographic-space</li>\n<li>split-diff</li>\n<li>rst-preview-pandoc</li>\n</ul>\n<p>テーマのインストール</p>\n<ul>\n<li>seti-ui アイコンが良い</li>\n<li>predawn-syntax 見やすい</li>\n</ul>\n<h4>Python</h4>\n<ul>\n<li>pyenvとPoetryを使う(Poetry単独だと2.7系のシステムPythonを使おうとする)</li>\n<li>Julia関連(IJuliaやPyCallなど)はなぜかConda.jlのpythonを推すので要検討</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">brew install pyenv\npyenv install --list\npyenv install [listで確認したバージョン]\npyenv global [listで確認したバージョン]\n\n# .zshrcでパスを通す\necho -e &#39;if command -v pyenv 1&gt;/dev/null 2&gt;&amp;1; then\\n  eval &quot;$(pyenv init -)&quot;\\nfi&#39; &gt;&gt; ~/.zshrc\n\n# flake8はAtomで使うのでglobalインストール\npip install flake8\n\n# poetry\ncurl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python\n# poetryにパスを通す\n# Node風にローカルでパッケージを管理\npoetry config virtualenvs.in-project true\n\n# それぞれのプロジェクトでpyproject.tomlをinstantiateする\npoetry install</code></pre></div>\n<p>Jupyter notebookを使うプロジェクトを新規作成する場合</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">poetry new projectname\npoetry add jupyter\npoetry add jupytext\npoetry add jupyter_contrib_nbextensions</code></pre></div>\n<p>poetry installだけでなく、Nbextensionの有効化が必要</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">poetry run jupyter contrib nbextension install --user</code></pre></div>\n<p>これでWebUIからnbextensionを設定できるので、ExecuteTime等を入れる</p>\n<h4>その他旧conda時代のPython環境</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">conda install rdkit -c rdkit  # vegaが先だとコンフリクトする？\nconda install vega -c conda-forge\nconda install scikit-learn\n\n# Python開発\nconda install sphinx\n# sphinxcontrib-napoleonはビルトインになった\nconda install sphinx_rtd_theme\nconda install twine -c conda-forge\nconda install wheel -c conda-forge\n\n# Networkx2対応python-louvain\npip install git+https://github.com/taynaud/python-louvain.git@networkx2</code></pre></div>\n<h3>Julia</h3>\n<ul>\n<li>Mac版公式アプリケーションをダウンロードしてインストール</li>\n<li>実行可能バイナリにパスを通す(localenvの.zshrcに記載済み)</li>\n<li>デフォルトプロジェクトに必要なライブラリをインストール</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">add IJulia\nadd Revise\nadd BinaryBuilder\nadd PackageCompiler\nadd Plots</code></pre></div>\n<p>Jupyterのカーネルが登録されているか確認</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">jupyter kernelspec list</code></pre></div>\n<h4>TODO: カスタムデフォルトsysimageからの起動</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">cd $LOCAL\ncreate_sysimage(:Plots, sysimage_path=&quot;sysimage/sys_plots.dylib&quot;, precompile_execution_file=&quot;script/precompile_plots.jl&quot;)</code></pre></div>\n<h3>Node.js</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">brew install node\nnpm install -g yarn\nyarn global add eslint</code></pre></div>\n<h3>C/C++</h3>\n<p>cmakeはmacにデフォルトでインストールされていない。C++ビルドに必須。\nOpenSSLも何かと必要(MacOSデフォルトはLibreSSL)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">brew install cmake\nbrew install openssl</code></pre></div>\n<h3>LaTeX</h3>\n<ul>\n<li>MacTeX公式からBasicTeX.pkgをダウンロードしてインストール</li>\n<li>/Library/TeX/texbinにパスを通す</li>\n<li>\n<p>TODO: brew cask install mactex</p>\n<ul>\n<li>ghostscriptもこれで入るらしい</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">sudo tlmgr update --self --all  # なんかエラー出る\nsudo tlmgr install latexmk    # pdf出力 デフォルトで入ってない\nsudo tlmgr install achemso    # ACSのフォーマット\nsudo tlmgr install mhchem     # achemso必須\nsudo tlmgr install chemgreek  # achemso必須\nsudo tlmgr install mciteplus  # achemso必須</code></pre></div>\n<h3>PyMol</h3>\n<ul>\n<li>TODO: ラボォ氏のテキストを参考に構築</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">brew install homebrew/dupes/tcl-tk --enable-threads --with-x11  # for PyMol\nbrew install python --with-brewed-tk  # for PyMol\nbrew install homebrew/science/pymol</code></pre></div>\n<h3>その他</h3>\n<ul>\n<li>TODO: gromacsとかpsi4のdocker</li>\n</ul>\n<h3>KNIME</h3>\n<p>Install new software -> KNIME Python integrationを入れる</p>\n<p>poetry newでknimeのワークスペースにpython環境を作る</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">poetry add numpy\npoetry add pandas</code></pre></div>\n<p>KNIMEの環境設定で.venv内のpythonのパスを通す</p>","fields":{"slug":"/environment-memo/"},"frontmatter":{"title":"作業環境構築メモ","dateCreated":"May 19, 2020","dateModified":"August 09, 2020","tags":["macOS","environment setup"],"description":null}}},"pageContext":{"slug":"/environment-memo/","draft":false,"previous":{"fields":{"slug":"/rabbitmq-c-memo/"},"frontmatter":{"title":"rabbitmq Cクライアントメモ","draft":false}},"next":{"fields":{"slug":"/ubuntu20-upgrade/"},"frontmatter":{"title":"SSHリモートでUbuntu20.04にアップグレードした際のメモ","draft":false}}}}}