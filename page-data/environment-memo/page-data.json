{"componentChunkName":"component---src-templates-post-js","path":"/environment-memo/","result":{"data":{"site":{"siteMetadata":{"title":"mojaie.github.io","siteUrl":"https://mojaie.github.io","author":{"name":"Seiji Matsuoka","summary":"Cheminformatics, Biointeraction and Laboratory automation"},"license":"CC BY 4.0","licenseURL":"https://creativecommons.org/licenses/by/4.0/legalcode","social":{"twitter":"mojaie"}}},"markdownRemark":{"id":"7a96216f-50e1-589f-811f-a874c8de1486","excerpt":"アプリケーション 公式サイトからダウンロード Google Chrome Sophos (自宅のみ) Symantec (職場のみ) Box Google Drive (自宅のみ) Sourcetree Zotero InkScape KNIME DeepL Tabula Julia Zoom WebEX…","html":"<h3>アプリケーション</h3>\n<h4>公式サイトからダウンロード</h4>\n<ul>\n<li>Google Chrome</li>\n<li>Sophos (自宅のみ)</li>\n<li>Symantec (職場のみ)</li>\n<li>Box</li>\n<li>Google Drive (自宅のみ)</li>\n<li>Sourcetree</li>\n<li>Zotero</li>\n<li>InkScape</li>\n<li>KNIME</li>\n<li>DeepL</li>\n<li>Tabula</li>\n<li>Julia</li>\n<li>Zoom</li>\n<li>WebEX</li>\n<li>Microsoft Office</li>\n<li>VSCode</li>\n</ul>\n<h4>App storeからダウンロード</h4>\n<ul>\n<li>Taurine</li>\n<li>StuffIt Expander</li>\n<li>Microsoft Remote Desktop</li>\n</ul>\n<h4>アプリケーション設定</h4>\n<ul>\n<li>Sourcetree</li>\n</ul>\n<p>GitHubのOAuth情報をキーチェーンに登録するため以下のコマンドを打つ</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">git config --global credential.helper osxkeychain</code></pre></div>\n<p>高容量ファイルがDiffされると重くなるので、SourceTreeのDiff設定で*.xml, *.svg, *.json, *.yaml, *.knimeあたりを無視するようにする。</p>\n<h3>開発環境</h3>\n<h4>localenv</h4>\n<p>localenvをcloneする。初回git使用時にコマンドラインツールのインストールを促されるのでインストールする。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">cd ~/Workspace\ngit clone https://github.com/mojaie/localenv.git</code></pre></div>\n<p>.zshrcのシンボリックリンクを作成</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">cd ~\nln -s ~/Workspace/localenv/.zshrc</code></pre></div>\n<h4>Homebrew</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">mkdir .homebrew &amp;&amp; curl -L https://github.com/Homebrew/brew/tarball/master | tar xz --strip 1 -C .homebrew\nbrew update\nbrew doctor</code></pre></div>\n<ul>\n<li>XQuartzが必要であればcaskで入れる。</li>\n<li>cmakeはmacにデフォルトでインストールされていない。C++ビルドに必須。</li>\n<li>\n<p>OpenSSLも何かと必要(MacOSデフォルトはLibreSSL)</p>\n<ul>\n<li>実験ノートのタイプスタンプにも使うので最新版を入れてbrew linkしておく</li>\n</ul>\n</li>\n<li>rsyncはmacデフォルトにもあるがbrewで3.0系を入れる</li>\n<li>noclamshellでクラムシェルモードを無効化</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># brew cask install xquartz\nbrew install cmake\nbrew install openssl\nbrew link openssl --force\nbrew install rsync\nbrew install pirj/homebrew-noclamshell/noclamshell\nbrew services start noclamshell</code></pre></div>\n<h4>VSCode</h4>\n<p>Extensionを入れる</p>\n<ul>\n<li>Japanese Language Pack</li>\n<li>Julia</li>\n<li>Markdown PDF</li>\n<li>Render Line Endings</li>\n<li>zenkaku</li>\n</ul>\n<h4>Python</h4>\n<ul>\n<li>pyenvとPoetryを使う(Poetry単独だと2.7系のシステムPythonを使おうとする)</li>\n<li>Julia関連(IJuliaやPyCallなど)はなぜかConda.jlのpythonを推すので要検討</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">brew install pyenv\npyenv install --list\npyenv install [listで確認したバージョン]\npyenv global [listで確認したバージョン]\n\n# .zshrcでパスを通す\necho -e &#39;if command -v pyenv 1&gt;/dev/null 2&gt;&amp;1; then\\n  eval &quot;$(pyenv init -)&quot;\\nfi&#39; &gt;&gt; ~/.zshrc\n\n# poetry\ncurl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python\n# poetryにパスを通す\n# Node風にローカルでパッケージを管理\npoetry config virtualenvs.in-project true\n\n# プロジェクトを新規作成する場合\npoetry new [project名]\n\n# 既にpyproject.tomlがある場合は、instantiateする\npoetry install</code></pre></div>\n<p>以下、現状のローカル環境の構成:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">poetry add numpy\npoetry add pandas\npoetry add scipy\npoetry add scikit-learn\n\npoetry add jupyter\npoetry add jupytext\n\npoetry add seaborn\npoetry add plotly\npoetry add kaleido  # plotly用\n\npoetry add python-dotenv\npoetry add PyYAML\npoetry add simplejson\npoetry add xlsxwriter\npoetry add selenium\npoetry add chromedriver-binary-auto  # Selenium用。自動で適切なバージョンのChrome driverが入る\n\n\n\n### Julia\n\n- Mac版公式アプリケーションをダウンロードしてインストール\n- 実行可能バイナリにパスを通す(localenvの.zshrcに記載済み)\n- デフォルトプロジェクトに必要なライブラリをインストール</code></pre></div>\n<p>add IJulia\nadd Revise</p>\n<h1>add BinaryBuilder</h1>\n<h1>add PackageCompiler</h1>\n<h1>add Plots</h1>\n<h1>add MassInstallAction</h1>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Jupyterのカーネルが登録されているか確認</code></pre></div>\n<p>poetry run jupyter kernelspec list</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">カーネルが入ってないことがある?一旦プレコンパイルが必要?(要確認)</code></pre></div>\n<p>using IJulia</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">#### TODO: カスタムデフォルトsysimageからの起動</code></pre></div>\n<p>cd $LOCAL\ncreate<em>sysimage(:Plots, sysimage</em>path=“sysimage/sys<em>plots.dylib”, precompile</em>execution<em>file=“script/precompile</em>plots.jl”)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">### Node.js</code></pre></div>\n<p>brew install node\nnpm install -g yarn\nyarn global add eslint</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">### PyMol\n\n- TODO: ラボォ氏のテキストを参考に構築、もしくはDocker</code></pre></div>\n<p>brew install homebrew/dupes/tcl-tk —enable-threads —with-x11  # for PyMol\nbrew install python —with-brewed-tk  # for PyMol\nbrew install homebrew/science/pymol</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">### その他\n\n- TODO: gromacsとかpsi4のdocker\n\n\n\n### KNIME\n\nInstall KNIME Extensions...で下記拡張をインストール\n\n#### 必須\n\n- KNIME Python Integration\n\n  Preferences-&gt;KNIME-&gt;Pythonという項目ができているので、Python3のところに.venv内のpythonのパスを設定する(browseからpythonを選択するとエイリアスではなく参照元が設定されてしまうので、.venv内のpythonのパスを手打ちする)\n\n- KNIME Report Designer\n\n  レポート自動化\n\n- KNIME Data Generation\n\n  データ生成(連番など)\n\n- KNIME Base Chemistry Types &amp; Nodes\n\n  SDFile読み書きなど\n\n#### 評価中\n\n- KNIME Python Integration (Labs)\n- KNIME Modern UI Preview\n- KNIME Plotly\n\n- KNIME Testing Framework UI\n\n  テスト用ノード\n  \n- KNIME HCS Tools\n\n  Z-score, RZ-score 不要かも\n\n- KNIME Image Processing\n- KNIME Image Processing - Python Extensions\n\n  プレート統計、ヒートマップなど。まだ使うか微妙\n\n- Streaming Execution\n\n  ストリーミング(非同期実行)ができるようになる。\n\n\n#### Windows編\n\n基本的には上記そのままインストール可能\n\n- Pythonはminicondaをインストーラでインストールして、minicondaルートを指定\n- conda installで必要なライブラリをインストール\n  - Plotlyはorcaにパスを通す必要あり\n    - conda install -c plotly plotly-orca\n    - Windowsの環境変数でminicondaのルートを指定\n  - conda install seaborn\n\n\n\n### Legacy\n\n#### Atom\n\nVSCodiumへ移行済み。以下2019年以前の設定。\n\n設定ファイルの共有</code></pre></div>\n<p>cd ~/.atom\nln -s ~/Workspace/localenv/atom<em>settings/config.cson\nln -s ~/Workspace/localenv/atom</em>settings/styles.less\nln -s ~/Workspace/localenv/atom_settings/init.coffee</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">パッケージのインストール\n\n- language-julia\n- language-latex\n- language-restructuredtext(不要？)\n- latex\n- linter\n- linter-eslint\n- linter-flake8\n- linter-htmlhint\n- show-ideographic-space\n- split-diff\n- rst-preview-pandoc(不要？)\n\nテーマのインストール\n\n- seti-ui アイコンが良い\n- predawn-syntax 見やすい\n\n\n#### その他旧conda時代のPython環境\n\ncondaは使わない。RDKitはDocker使用。</code></pre></div>\n<p>conda install rdkit -c rdkit  # vegaが先だとコンフリクトする？</p>\n<h1>Python開発</h1>\n<p>conda install sphinx</p>\n<h1>sphinxcontrib-napoleonはビルトインになった</h1>\n<p>conda install sphinx<em>rtd</em>theme\nconda install twine -c conda-forge\nconda install wheel -c conda-forge</p>\n<h1>Networkx2対応python-louvain</h1>\n<p>pip install git+<a href=\"https://github.com/taynaud/python-louvain.git@networkx2\">https://github.com/taynaud/python-louvain.git@networkx2</a></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">### LaTeX\n\n- MacTeX公式からBasicTeX.pkgをダウンロードしてインストール\n- /Library/TeX/texbinにパスを通す\n- TODO: brew cask install mactex\n  - ghostscriptもこれで入るらしい</code></pre></div>\n<p>sudo tlmgr update —self —all  # なんかエラー出る\nsudo tlmgr install latexmk    # pdf出力 デフォルトで入ってない\nsudo tlmgr install achemso    # ACSのフォーマット\nsudo tlmgr install mhchem     # achemso必須\nsudo tlmgr install chemgreek  # achemso必須\nsudo tlmgr install mciteplus  # achemso必須</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"></code></pre></div>","fields":{"slug":"/environment-memo/"},"frontmatter":{"title":"作業環境構築メモ","dateCreated":"May 19, 2020","dateModified":"January 05, 2022","tags":["macOS","environment setup"],"description":null}},"file":null},"pageContext":{"slug":"/environment-memo/","draft":false,"image":null,"previous":{"fields":{"slug":"/mac-vagrant-docker-memo/"},"frontmatter":{"title":"MacOSでVirturalBox+vagrantでDocker環境","image":null,"draft":false}},"next":{"fields":{"slug":"/docker-vpn-memo/"},"frontmatter":{"title":"VPN経由でDocker compose upするとサーバに接続できなくなった","image":null,"draft":false}}}},"staticQueryHashes":["2841359383","3266777773","401191528"]}