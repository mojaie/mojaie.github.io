{"componentChunkName":"component---src-templates-post-js","path":"/julia-pointer/","result":{"data":{"site":{"siteMetadata":{"title":"mojaie.github.io","siteUrl":"https://mojaie.github.io","author":{"name":"Seiji Matsuoka","summary":"Cheminformatics, Biointeraction and Laboratory automation"},"license":"CC BY 4.0","licenseURL":"https://creativecommons.org/licenses/by/4.0/legalcode","social":{"twitter":"mojaie"}}},"markdownRemark":{"id":"d7a1fca4-f94d-5782-ab66-f35f3207b123","excerpt":"Ref{T}とPtr{T} RefもPtrもメモリアドレスを指し示す値を格納するオブジェクトの型ですが、それぞれC++における参照とポインタの概念に近いと思われます。 Refによる参照はのように作成します。参照先のオブジェクトの取得(デリファレンス)はで行います。Refは必ずJulia…","html":"<h3>Ref{T}とPtr{T}</h3>\n<p>RefもPtrもメモリアドレスを指し示す値を格納するオブジェクトの型ですが、それぞれC++における参照とポインタの概念に近いと思われます。</p>\n<p>Refによる参照は<code class=\"language-text\">Ref(x)</code>のように作成します。参照先のオブジェクトの取得(デリファレンス)は<code class=\"language-text\">[]</code>で行います。Refは必ずJuliaのオブジェクトが格納された有効なアドレスを示すので、Ptrより安全です。</p>\n<p>Ptrを使うのは特にJuliaからCのライブラリを呼び出す際にC側のAPIでポインタが必要な場合です。pointer関数で作成します。アドレスがNULLを指すこともあり安全ではないので、デリファレンスの関数は<code class=\"language-text\">unsafe_load</code>、<code class=\"language-text\">unsafe_string</code>のようになっています。<code class=\"language-text\">C_NULL</code>でNULLを指すポインタを作成することもできます。</p>\n<p>PtrはRefのサブタイプです。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">julia&gt; Ptr &lt;: Ref\ntrue</code></pre></div>","fields":{"slug":"/julia-pointer/"},"frontmatter":{"title":"Juliaの参照とポインタ","dateCreated":"June 23, 2020","dateModified":"June 23, 2020","tags":["Julialang","C","C++"],"description":null}}},"pageContext":{"slug":"/julia-pointer/","draft":false,"previous":{"fields":{"slug":"/argo-workflow-memo/"},"frontmatter":{"title":"Argoの環境構築(MacOS)","draft":false}},"next":null}}}