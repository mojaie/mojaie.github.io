{"componentChunkName":"component---src-templates-post-js","path":"/julia-package-compiler/","result":{"data":{"site":{"siteMetadata":{"title":"mojaie.github.io","siteUrl":"https://mojaie.github.io","author":{"name":"Seiji Matsuoka","summary":"Cheminformatics, Biointeraction and Laboratory automation"},"license":"CC BY 4.0","licenseURL":"https://creativecommons.org/licenses/by/4.0/legalcode","social":{"twitter":"mojaie"}}},"markdownRemark":{"id":"af17d318-e07b-5e72-88e1-3ba7b0a173ed","excerpt":"PackageCompilerでJuliaのパッケージをコンパイルして共有ライブラリを作成します。 参考:\nhttps://julialang.github.io/PackageCompiler.jl/dev/ パッケージをコンパイルする目的 JITコンパイルの待ち時間を無くす Juliaはusingやimport…","html":"<p>PackageCompilerでJuliaのパッケージをコンパイルして共有ライブラリを作成します。</p>\n<p>参考:\n<a href=\"https://julialang.github.io/PackageCompiler.jl/dev/\">https://julialang.github.io/PackageCompiler.jl/dev/</a></p>\n<h3>パッケージをコンパイルする目的</h3>\n<ol>\n<li>\n<p>JITコンパイルの待ち時間を無くす</p>\n<p>Juliaはusingやimportされた関数が初めて実行される際にコンパイルを行うため、Jupyter notebook等でセッションを開始するごとに汎用的な関数がコンパイルされる事は大変なストレスになります。そこで、予め頻繁に使用するモジュール(例えばPlot.jl)がプレコンパイルされたシステムイメージを作成し、デフォルトイメージとして使用する事でJITコンパイルを避けることができます。</p>\n</li>\n<li>\n<p>Juliaのプログラムを他の言語のプログラムから呼び出せるようにする</p>\n<p>拡張子.soのライブラリファイル(MacOSでは.dylib)を作成することで、C言語あるいはPythonのctypesライブラリからJuliaの関数を呼び出すことができます。もちろん、Juliaのccallでも呼び出すことが可能です。作成したライブラリはJulia1.3以降のArtifactシステムを利用することで、環境に左右されずに様々なプラットフォームで利用することができます。</p>\n</li>\n<li>\n<p>実行可能なJuliaのプログラムを配布する</p>\n<p>上記と同様の方法で、実行可能なバイナリを作成することもできます。Artifactシステムを利用して各プラットフォームで実行可能なアプリケーションを作成し、配布することが容易になります。また、Dockerコンテナに実行可能なアプリケーションを配置し、Kubernetes等のパイプラインに組み込むことも可能です。</p>\n</li>\n</ol>\n<h3>環境</h3>\n<ul>\n<li>Julia 1.5.0</li>\n</ul>\n<h3>Juliaのパッケージを共有ライブラリにする</h3>\n<p>公式リポジトリに登録可能な形式で作成されたパッケージを作成します(あるいは、利用したい公式リポジトリのパッケージをインストールします)。</p>\n<p>単にシステムイメージや実行可能バイナリを作成したい場合はそのままで問題ありませんが、他言語から呼び出し可能な共有ライブラリを作成する場合は、exposeする関数に<code class=\"language-text\">@ccallable</code>マクロを設定します。</p>\n<p>下記に、執筆者の作成したMolecularGraph.jlというライブラリのインターフェースである、MolecularGraphCInterface.jlというパッケージの例を示します。引数と返り値はC言語に互換性のある型である必要があります。</p>\n<div class=\"gatsby-highlight\" data-language=\"julia\"><pre class=\"language-julia\"><code class=\"language-julia\"><span class=\"token keyword\">module</span> MolecularGraphCInterface\n\n<span class=\"token keyword\">using</span> MolecularGraph\n\n\nBase<span class=\"token punctuation\">.</span>@ccallable <span class=\"token keyword\">function</span> getmw<span class=\"token punctuation\">(</span>smiles<span class=\"token punctuation\">::</span>Ptr<span class=\"token punctuation\">{</span>UInt8<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">::</span>Cdouble\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">try</span>\n        mol <span class=\"token operator\">=</span> smilestomol<span class=\"token punctuation\">(</span>unsafe_string<span class=\"token punctuation\">(</span>smiles<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        precalculate<span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>mol<span class=\"token punctuation\">)</span>\n        standardweight<span class=\"token punctuation\">(</span>Float64<span class=\"token punctuation\">,</span> mol<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">catch</span>\n        Base<span class=\"token punctuation\">.</span>invokelatest<span class=\"token punctuation\">(</span>Base<span class=\"token punctuation\">.</span>display_error<span class=\"token punctuation\">,</span> Base<span class=\"token punctuation\">.</span>catch_stack<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        nothing\n    <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span>\n\nBase<span class=\"token punctuation\">.</span>@ccallable <span class=\"token keyword\">function</span> getstruct<span class=\"token punctuation\">(</span>smiles<span class=\"token punctuation\">::</span>Ptr<span class=\"token punctuation\">{</span>UInt8<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">::</span>Ptr<span class=\"token punctuation\">{</span>UInt8<span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">try</span>\n        mol <span class=\"token operator\">=</span> smilestomol<span class=\"token punctuation\">(</span>unsafe_string<span class=\"token punctuation\">(</span>smiles<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        precalculate<span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>mol<span class=\"token punctuation\">)</span>\n        pointer<span class=\"token punctuation\">(</span>drawsvg<span class=\"token punctuation\">(</span>mol<span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">catch</span>\n        Base<span class=\"token punctuation\">.</span>invokelatest<span class=\"token punctuation\">(</span>Base<span class=\"token punctuation\">.</span>display_error<span class=\"token punctuation\">,</span> Base<span class=\"token punctuation\">.</span>catch_stack<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        nothing\n    <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">if</span> abspath<span class=\"token punctuation\">(</span>PROGRAM_FILE<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> @__FILE__\n    teststr <span class=\"token operator\">=</span> <span class=\"token string\">\"CC1=C2[C@@]([C@]([C@H]([C@@H]3[C@]4([C@H](OC4)C[C@@H]([C@]3(C(=O)[C@@H]2OC(=O)C)C)O)OC(=O)C)OC(=O)c5ccccc5)(C[C@@H]1OC(=O)[C@H](O)[C@@H](NC(=O)c6ccccc6)c7ccccc7)O)(C)C\"</span>\n    <span class=\"token keyword\">println</span><span class=\"token punctuation\">(</span>getmw<span class=\"token punctuation\">(</span>pointer<span class=\"token punctuation\">(</span>teststr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">println</span><span class=\"token punctuation\">(</span>unsafe_string<span class=\"token punctuation\">(</span>getstruct<span class=\"token punctuation\">(</span>pointer<span class=\"token punctuation\">(</span>teststr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">end</span> <span class=\"token comment\"># module</span></code></pre></div>\n<p>モジュールのテストを実行し、動作を確認します。</p>\n<h3>全自動でコンパイル</h3>\n<p>基本的には<code class=\"language-text\">create_sysimage</code>を呼び出すだけで必要な機能が全てコンパイルされた共有ライブラリが作成できます。</p>\n<div class=\"gatsby-highlight\" data-language=\"julia\"><pre class=\"language-julia\"><code class=\"language-julia\"><span class=\"token keyword\">using</span> PackageCompiler\ncreate_sysimage<span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span>sysimage_path<span class=\"token operator\">=</span><span class=\"token string\">\"libmgcint.dylib\"</span><span class=\"token punctuation\">,</span> incremental<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> script<span class=\"token operator\">=</span><span class=\"token string\">\"MolecularGraphCInterface.jl\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>ccall関数を使ってJuliaから呼び出せるかどうか確認します。</p>\n<div class=\"gatsby-highlight\" data-language=\"julia\"><pre class=\"language-julia\"><code class=\"language-julia\"><span class=\"token keyword\">using</span> Libdl\nlibmg <span class=\"token operator\">=</span> dlopen<span class=\"token punctuation\">(</span><span class=\"token string\">\"libmgcint.dylib\"</span><span class=\"token punctuation\">)</span>\ngetmw <span class=\"token operator\">=</span> dlsym<span class=\"token punctuation\">(</span>libmg<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span>getmw<span class=\"token punctuation\">)</span>\nmol <span class=\"token operator\">=</span> <span class=\"token string\">\"CC1=C2[C@@]([C@]([C@H]([C@@H]3[C@]4([C@H](OC4)C[C@@H]([C@]3(C(=O)[C@@H]2OC(=O)C)C)O)OC(=O)C)OC(=O)c5ccccc5)(C[C@@H]1OC(=O)[C@H](O)[C@@H](NC(=O)c6ccccc6)c7ccccc7)O)(C)C\"</span>\n<span class=\"token keyword\">ccall</span><span class=\"token punctuation\">(</span>getmw<span class=\"token punctuation\">,</span> Cdouble<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>Cstring<span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> mol<span class=\"token punctuation\">)</span></code></pre></div>\n<h3>手動でコンパイル</h3>\n<p>コンパイルしたい関数を選びたい場合など、手動でコンパイルすることも可能です。</p>\n<ol>\n<li>—trace-compileでコンパイル情報を追跡記録</li>\n<li>—output-oで上記記録をもとにオブジェクトファイルを作成</li>\n<li>プラットフォーム依存のlibjuliaビルドオプションを確認する</li>\n<li>libjuliaビルドオプションを参考にライブラリをビルド</li>\n</ol>\n<p>—trace-compileオプションで指定したパスに、juliaのスクリプトが実行された際に行われたコンパイルを追跡して記録したファイルが生成されます。この情報をもとにコンパイルすることで、このスクリプトを実行するために必要なオブジェクトだけがコンパイルされたバイナリを作成することができます。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell-session\"><pre class=\"language-shell-session\"><code class=\"language-shell-session\"><span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\"><span class=\"token builtin class-name\">cd</span> project_dir</span></span>\n<span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\">julia --project<span class=\"token operator\">=</span>. --trace-compile<span class=\"token operator\">=</span>app_precompile.jl src/MolecularGraphCInterface.jl</span></span></code></pre></div>\n<p>—output-oオプションで生成する.oファイルのパスを指定し、custom<em>sysimage.jlというスクリプトを実行します。custom</em>sysimage.jlは下記公式チュートリアルに例があります。\n<a href=\"https://julialang.github.io/PackageCompiler.jl/dev/devdocs/binaries_part_2/\">https://julialang.github.io/PackageCompiler.jl/dev/devdocs/binaries_part_2/</a></p>\n<div class=\"gatsby-highlight\" data-language=\"shell-session\"><pre class=\"language-shell-session\"><code class=\"language-shell-session\"><span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\"><span class=\"token function\">mkdir</span> build</span></span>\n<span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\">julia --project<span class=\"token operator\">=</span>. -J<span class=\"token string\">\"/Applications/Julia-1.5.app/Contents/Resources/julia/lib/julia/sys.dylib\"</span> --output-o build/sys.o custom_sysimage.jl</span></span></code></pre></div>\n<p>プラットフォームごとにJuliaのライブラリのビルドに必要なCコンパイラのフラッグは異なるので、Juliaアプリケーション自体をビルドした際の情報をもとにビルドを行います。Juliaアプリケーションのshareフォルダにあるjulia-config.jlを実行すると、Julia自体のコア機能を担う共有ライブラリlibjuliaをビルドした際のビルドオプションを確認できます。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell-session\"><pre class=\"language-shell-session\"><code class=\"language-shell-session\"><span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\">/Applications/Julia-1.5.app/Contents/Resources/julia/share/julia/julia-config.jl --cflags --ldflags --ldlibs</span></span>\n\n<span class=\"token output\">-std=gnu99 -I'/Applications/Julia-1.5.app/Contents/Resources/julia/include/julia' -fPIC\n-L'/Applications/Julia-1.5.app/Contents/Resources/julia/lib'\n-Wl,-rpath,'/Applications/Julia-1.5.app/Contents/Resources/julia/lib' -ljulia</span></code></pre></div>\n<p>gccでオブジェクトファイルをコンパイルします。以下MacOSと一般的なLinuxの例です。同じOSでもバージョンによってビルドオプションが異なる場合があるので、必ずjulia-config.jlで自身の環境のビルドオプションを確認することが重要です。</p>\n<p>MacOS</p>\n<div class=\"gatsby-highlight\" data-language=\"shell-session\"><pre class=\"language-shell-session\"><code class=\"language-shell-session\"><span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\"><span class=\"token builtin class-name\">cd</span> build</span></span>\n<span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\">gcc -shared -o libmgcint.dylib -Wl,-all_load sys.o -std<span class=\"token operator\">=</span>gnu99 -I<span class=\"token string\">'/Applications/Julia-1.5.app/Contents/Resources/julia/include/julia'</span> -fPIC -L<span class=\"token string\">\"/Applications/Julia-1.5.app/Contents/Resources/julia/lib\"</span> -Wl,-rpath,<span class=\"token string\">'/Applications/Julia-1.5.app/Contents/Resources/julia/lib'</span> -ljulia</span></span></code></pre></div>\n<p>Linux</p>\n<div class=\"gatsby-highlight\" data-language=\"shell-session\"><pre class=\"language-shell-session\"><code class=\"language-shell-session\"><span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\"><span class=\"token builtin class-name\">cd</span> build</span></span>\n<span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\">gcc -shared -o libmgcint.dylib -fPIC -Wl,--whole-archive sys.o -Wl,--no-whole-archive -L<span class=\"token string\">\"/Applications/Julia-1.5.app/Contents/Resources/julia/lib\"</span> -ljulia</span></span></code></pre></div>\n<p>ビルドに成功すると.dylibもしくは.soファイルが生成されます。</p>","fields":{"slug":"/julia-package-compiler/"},"frontmatter":{"title":"Juliaのパッケージをコンパイルして共有ライブラリを作成する","dateCreated":"August 08, 2020","dateModified":"August 16, 2020","tags":["Julia","package development"],"description":null}},"file":null},"pageContext":{"slug":"/julia-package-compiler/","draft":false,"image":null,"previous":{"fields":{"slug":"/julia-package-cleanup/"},"frontmatter":{"title":"不要なJuliaのパッケージを削除して空き容量を確保する","image":null,"draft":false}},"next":{"fields":{"slug":"/ubuntu-elabftw/"},"frontmatter":{"title":"Ubuntu20.04にelabFTWサーバ構築時のメモ","image":null,"draft":false}}}},"staticQueryHashes":["2841359383","3266777773","401191528"]}