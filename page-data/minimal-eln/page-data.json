{"componentChunkName":"component---src-templates-post-js","path":"/minimal-eln/","result":{"data":{"site":{"siteMetadata":{"title":"mojaie.github.io","siteUrl":"https://mojaie.github.io","author":{"name":"Seiji Matsuoka","summary":"Cheminformatics, Biointeraction and Laboratory automation"},"license":"CC BY 4.0","licenseURL":"https://creativecommons.org/licenses/by/4.0/legalcode","social":{"twitter":"mojaie"}}},"markdownRemark":{"id":"3197b1d4-d3e8-5eb8-8aa0-6ce9efee4dd4","excerpt":"(2022/03/14更新) : タイムスタンプ情報の抽出方法が間違っていたので修正しました。\n(2022/08/23更新) : タイムスタンプの有効期限について追記しました。 要点 電子実験ノート(ELN)が欲しかったのでオープンソースのものでDIYしました VSCodeのMarkdown PDF…","html":"<p>(2022/03/14更新) : タイムスタンプ情報の抽出方法が間違っていたので修正しました。\n(2022/08/23更新) : タイムスタンプの有効期限について追記しました。</p>\n<h3>要点</h3>\n<ul>\n<li>電子実験ノート(ELN)が欲しかったのでオープンソースのものでDIYしました</li>\n<li>VSCodeのMarkdown PDFは便利</li>\n<li>タイムスタンプはOpenSSLで作成できる</li>\n<li>クラウドストレージやspotlightの全文検索を活用しよう</li>\n</ul>\n<h3>環境</h3>\n<ul>\n<li>MacOS 12.5.1</li>\n<li>\n<p>VSCode 1.70.1</p>\n<ul>\n<li>Markdown PDF 1.4.4</li>\n</ul>\n</li>\n<li>OpenSSL 1.1.1q</li>\n</ul>\n<h3>どうしてこうなった…</h3>\n<ul>\n<li><a href=\"https://www.elabftw.net/\">eLabFTW</a>を試用していたが、日本語環境の対応が遅れていて実用に耐えなかった。メジャーバージョンアップ時にデータベースが文字化けで死んだのでこれを機にやめた。</li>\n<li>そもそも実験ノートになぜサーバが必要なのか</li>\n<li>書いたMarkdownがPDFになってタイムスタンプが押せればそれはELNと言えるのでは</li>\n<li>タグ付け、カテゴリ分けなどしなくてもspotlightやクラウドストレージの全文検索で検索すればいいのでは</li>\n</ul>\n<h3>最低限の機能</h3>\n<ol>\n<li>\n<p>Markdownエディタ</p>\n<p>構造的な文書が平易な文法で書けるという点でほぼ一択なのかと思います。一応画像を貼ることもできるので写真やスペクトルデータの添付にも困りませんね。</p>\n</li>\n<li>\n<p>タイムスタンプ認証局(TSA)の認証によるタイムスタンプの付与</p>\n<p>データの真正性の確保の点で電子実験ノートに必須の機能です。認証局のタイムスタンプがあることでファイルが特定の日時に存在していたことを証明でき、改竄を防ぐことができます。</p>\n</li>\n<li>\n<p>全文検索可能なデータベース</p>\n<p>たくさんのノートを引っ張り出して片っ端からページをめくらなくても、一瞬で検索できるのが電子実験ノートの強みです。</p>\n</li>\n</ol>\n<h3>VSCodeを使ってMarkdownで実験ノートを書く</h3>\n<p>VSCodeはデフォルトでMarkdownが書けます。F1メニューでPreview->画面分割してプレビューしながら編集できるのも良いですね。</p>\n<p>画像はMarkdownだとサイズ変更できないので、imgタグで適当な大きさにします。直接エディタに画像をドラッグアンドドロップで貼り付けられるプラグインもあるようです。</p>\n<h3>Markdown PDFプラグインでPDFに変換する</h3>\n<p>Markdown PDF<br>\n<a href=\"https://marketplace.visualstudio.com/items?itemName=yzane.markdown-pdf\">https://marketplace.visualstudio.com/items?itemName=yzane.markdown-pdf</a></p>\n<p>Markdown PDFプラグインをインストールします(VSCodiumの場合はMarketplaceにないのでvsixでインストールします)。F1メニューもしくは右クリックメニューでExport (pdf)すると同じ階層にPDFが出力されます。</p>\n<h3>タイムスタンプの作成</h3>\n<ol>\n<li>\n<p>タイムスタンプ認証局(TSA)から公開鍵を取得します。今回は学術用途に限り無料で利用できるドイツ研究ネットワーク(Deutsche Forschungsnetz; DFN)の認証局を利用します。</p>\n<p>FAQ Zeitstempeldienst (ドイツ語です)<br>\n<a href=\"https://www.pki.dfn.de/faqpki/faq-zeitstempel/\">https://www.pki.dfn.de/faqpki/faq-zeitstempel/</a></p>\n<p>証明書チェーン<br>\n<a href=\"https://pki.pca.dfn.de/dfn-ca-global-g2/pub/cacert/chain.txt\">https://pki.pca.dfn.de/dfn-ca-global-g2/pub/cacert/chain.txt</a></p>\n</li>\n<li>\n<p>実験ノートPDFを元に、タイムスタンプのリクエストファイル(.tsq)を生成します。</p>\n<p>OpenSSLマニュアル openssl ts<br>\n<a href=\"https://www.openssl.org/docs/man1.1.1/man1/openssl-ts.html\">https://www.openssl.org/docs/man1.1.1/man1/openssl-ts.html</a></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">openssl ts -query -data &quot;210707_nice_experiment_1.pdf&quot; -sha512 -cert -out &quot;210707_nice_experiment_1.tsq&quot;</code></pre></div>\n<p>オプションの<code class=\"language-text\">-sha512</code>はハッシュアルゴリズムをデフォルトのSHA-1からSHA-512に変更しています。</p>\n</li>\n<li>\n<p>タイムスタンプ認証局にタイムスタンプ発行リクエストを送信して、レスポンスファイル(.tsr)を受信します。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">curl -H &quot;Content-Type: application/timestamp-query&quot; --data-binary &#39;@210707_nice_experiment_1.tsq&#39; http://zeitstempel.dfn.de/ &gt; &quot;210707_nice_experiment_1.tsr&quot;</code></pre></div>\n</li>\n<li>\n<p>リクエスト(以下の例では元のPDF)とレスポンスを照合して、有効なタイムスタンプが付与されたかどうかを確認します。CAfileオプションの値はルート認証局のCAファイルの場所で、MacOSのデフォルトは多分<code class=\"language-text\">/private/etc/ssl/cert.pem</code>です。untrustedオプションの値はTSAから取得した証明書チェーンの場所になります。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">openssl ts -verify -data &quot;210707_nice_experiment_1.pdf&quot; -in &quot;210707_nice_experiment_1.tsr&quot; -CAfile /private/etc/ssl/cert.pem -untrusted ./sign-verify/chain.txt</code></pre></div>\n<p>OKと表示されれば有効なタイムスタンプが付与されています。</p>\n</li>\n<li>\n<p>タイムスタンプの中身を確認する</p>\n<p><code class=\"language-text\">-reply</code>オプションでタイムスタンプの中身を確認します。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">openssl ts -reply -in &quot;210707_nice_experiment_1.tsr&quot; -text -token_out</code></pre></div>\n<p>レスポンスファイルの中身を解析すると、タイムスタンプの発行日時が確認できます。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell-session\"><pre class=\"language-shell-session\"><code class=\"language-shell-session\"><span class=\"token output\">% openssl asn1parse -in \"210707_nice_experiment_1.tsr\" -inform DER\nVersion: 1\nPolicy OID: 1.3.6.1.4.1.22177.300.22.1\nHash Algorithm: sha1\nMessage data:\n  0000 - 84 54 ba b0 e6 f2 89 48-cd f1 b4 f2 86 ec 2e 22   .T.....H.......\"\n  0010 - a4 b3 85 e9                                       ....\nSerial number: 0xB2AFAF0BA0D221A085D370F3CE611B89B30EEF4D\nTime stamp: Feb  8 07:36:49 2022 GMT\nAccuracy: unspecified\nOrdering: no\nNonce: 0x9AB67B1A32BBE5E5\nTSA: unspecified\nExtensions:</span></code></pre></div>\n<p>余談ですが、レスポンスファイルはDERという形式になっていて、<code class=\"language-text\">openssl asn1parse</code>でレスポンスファイルを解析することができます。レスポンスにはタイムスタンプ情報の他、TSAおよび認証局の証明書情報などが含まれます。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">openssl asn1parse -in <span class=\"token string\">\"210707_nice_experiment_1.tsr\"</span> -inform DER <span class=\"token operator\">></span> <span class=\"token string\">\"parsed.txt\"</span></code></pre></div>\n<p>上記のタイムスタンプ情報は<code class=\"language-text\">id-smime-ct-TSTInfo</code>というフィールドに、HEXエンコードされたDER形式のテキストとして格納されています。このテキストを下記のように解析すると、<code class=\"language-text\">openssl ts -reply</code>で得られるタイムスタンプ情報の元となるデータが得られます。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'[id-smime-ct-TSTInfoの値]'</span> <span class=\"token operator\">|</span> xxd -r -p - <span class=\"token operator\">|</span> openssl asn1parse -inform DER</code></pre></div>\n</li>\n</ol>\n<h3>タイムスタンプの有効期間について</h3>\n<p>TSA証明書(上記chain.txt)の期限切れまでがタイムスタンプの有効期間です。最長で10年程度とのことですが、期限切れが近いTSA証明書を使用するほどタイムスタンプの有効期間は短くなります。今回使用したDFNの証明書の有効期間は2031年頃までです。</p>\n<p>Informationen über die Zertifizierungsstelle in der DFN-PKI DFN-CA Global G2 - Interface für die DFN-PCA<br>\n<a href=\"https://info.pca.dfn.de/dfn-ca-global-g2/\">https://info.pca.dfn.de/dfn-ca-global-g2/</a></p>\n<p>また、タイムスタンプの署名の証明書の期限は短い(1−5年程度?上記DFNは3年?)ですので、タイムスタンプ付与からしばらくするとverifyコマンドが通らなくなることがあります(Verify error:certificate has expired になる)。署名証明書自体は失効しても、それ以前に有効なタイムスタンプが付与されていれば問題ありません。verifyコマンドに-attimeオプションを付けて証明書が切れる前の日付を指定すると、証明書失効前に有効なタイムスタンプが付与されたかどうかが検証できます。また、一応verifyコマンドに-no_check_timeオプションを付けることで、有効期限を無視してハッシュの整合性だけ検証することも可能です。</p>\n<h3>実験ノート、データの保管と検索</h3>\n<p>作成したPDFとタイムスタンプ関連ファイルをクラウドに保管します。ファイル名の命名規則やフォルダ構造で、時系列あるいは分類別などで整理して保管します。</p>\n<p>Google Drive、Boxなどの大規模商用クラウドは高速な全文検索エンジンが搭載されているので、下手な自前サーバよりも高速でPDFやMarkdownを検索し、実験条件や試薬など細かい条件を見つけ出すことができます。日本語の検索にも強いです。クラウドが利用できない環境では、MacのSpotlightを活用すると同様の検索が可能です。</p>\n<h3>課題</h3>\n<ul>\n<li>事務方に「ノートを確認したいから紙媒体で提出しろ」と言われた時の対応</li>\n</ul>","fields":{"slug":"/minimal-eln/"},"frontmatter":{"title":"オープンソースでミニマルな電子実験ノート(ELN)を実装する","dateCreated":"July 29, 2021","dateModified":"August 23, 2022","tags":["electronic lab notebook","VSCode","trusted timestamping","openssl"],"description":null}},"file":null},"pageContext":{"slug":"/minimal-eln/","draft":false,"image":null,"previous":{"fields":{"slug":"/pyenv-lzma/"},"frontmatter":{"title":"pyenvでlzmaがない警告 (MacOS)","image":null,"draft":false}},"next":null}},"staticQueryHashes":["2841359383","3266777773","401191528"]}